{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"List of Tasks","text":"<ul> <li> <p>Setup:</p> <ul> <li>Task 1: Install Tools</li> <li>Task 2: Setup GitHub</li> </ul> </li> <li> <p>Working with Repositories:</p> <ul> <li>Creating a Repository<ul> <li>1a. Creating a Repository (MCP)</li> <li>1b. Creating a Repository (WEB)</li> <li>1c. Creating a Repository (gh)</li> </ul> </li> <li>2. Cloning a Repository</li> <li>3. Making Changes</li> <li>4. Committing Changes</li> <li>5. Pushing Changes</li> </ul> </li> </ul>"},{"location":"000-Setup/01-Install-Tools/","title":"Installing Tools","text":"<p>About this Guide</p> <p>This guide will walk you through installing git, creating a GitHub account and configuring it for the first time.</p>"},{"location":"000-Setup/01-Install-Tools/#1-installing-git","title":"1. Installing Git","text":"<ul> <li>First, you need to install Git locally.</li> </ul> <p> Installing Git</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># (Requires [Homebrew](https://brew.sh/))\nbrew install git\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install git\n</code></pre></p>"},{"location":"000-Setup/01-Install-Tools/#2-installing-gh","title":"2. Installing <code>gh</code>","text":"<ul> <li>To work with GitHub from your computer, you can use the optional GitHub CLI (<code>gh</code>) tool to interact with GitHub directly from your terminal.</li> </ul> <p> Installing GitHub CLI</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># (Requires [Homebrew](https://brew.sh/))\nbrew install gh\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install gh\n</code></pre></p>"},{"location":"000-Setup/01-Install-Tools/#3-set-up-your-git-identity","title":"3. Set Up Your Git Identity","text":"<ul> <li>In order to use Git and GitHub effectively, you need to configure your Git identity.</li> <li>Your Git identity is defined by your name and email address, which will be associated with your commits.</li> <li> <p>Open your terminal and run the following commands to set your global Git configuration:    <pre><code># Configure Git with your user information\n# Replace with the name and email you used for GitHub.\ngit config --global user.name \"&lt;Your Name&gt;\"\ngit config --global user.email \"&lt;your-email@example.com&gt;\"\n</code></pre></p> <pre><code># Example:\ngit config --global user.name \"Nir Geier\"\ngit config --global user.email \"nir.geier@gmail.com\"\n</code></pre> </li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/","title":"Setup GitHub","text":"<p>About this Guide</p> <p>This guide will walk you through setting up your GitHub account and configuring it for the first time.</p>"},{"location":"000-Setup/02-Setup-GitHub/#1-create-github-account","title":"1. Create GitHub Account","text":"<ol> <li>Go to https://github.com/.</li> <li>Click Sign up in the top-right corner.</li> <li>Enter your email address and click Continue.</li> <li>Create a strong password and click Continue.</li> <li>Choose a username (this will be your public identity on GitHub).</li> <li>Follow the prompts to verify your account (you may need to solve a puzzle or enter a code sent to your email).</li> <li>Choose your plan (the free plan is sufficient for most users).</li> <li>Complete the setup by answering a few questions (optional) and click Complete setup.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#2-verify-your-email-address","title":"2. Verify Your Email Address","text":"<ol> <li>Check your email inbox for a message from GitHub.</li> <li>Click the verification link in the email to activate your account.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#3-set-up-your-profile","title":"3. Set Up Your Profile","text":"<ol> <li>Click your profile icon in the top-right and select Your profile.</li> <li>Click Edit profile to add your name, bio, location, and profile picture.</li> <li>Save your changes.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#4-generate-ssh-key","title":"4. Generate SSH Key","text":"<ul> <li>When working with Git and GitHub, it\u2019s a good idea to set up SSH keys for secure authentication.</li> <li> <p>SSH keys are a pair of cryptographic keys that can be used to authenticate to GitHub without needing to enter your username and password every time.</p> </li> <li> <p>In your terminal, run:   <pre><code># Generate a new SSH key\n# -C is optional for email association with your GitHub account\nssh-keygen -t rsa -C \"your-email@example.com\"\n</code></pre></p> </li> <li> <p>This will create two files:</p> File Description <code>~/.ssh/id_rsa</code> Your private key (keep this secret) <code>~/.ssh/id_rsa.pub</code> Your public key (can be shared) <pre><code># Example output\n$ ssh-keygen -t rsa -C \"your-email@example.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa\nYour public key has been saved in /root/.ssh/id_rsa.pub &lt;&lt;&lt; &lt;&lt;&lt; &lt;&lt;&lt; This is the key you need\nThe key fingerprint is:\nSHA256:47MfTsMWlEN8PYpSGvYWlLd4u4fE4njqHrs53+oxEZM your-email@example.com\nThe key`s randomart image is:\n+---[RSA 3072]----+\n|         oo. .   |\n|        o.=oo o  |\n|       . =E* o . |\n|        o.=++    |\n|        Sooo .   |\n|       . o.o+    |\n|        +oOo o   |\n|        oXo*o .  |\n|       oOO*...   |\n+----[SHA256]-----+\n</code></pre> </li> <li> <p>Press Enter to accept the default file location and do not set a passphrase or you will be prompted to enter it each time you use the key.</p> </li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/#5-add-your-ssh-to-ssh-agent","title":"5. Add your SSH to ssh-agent","text":"<ul> <li>If you are using Windows, make sure you have Git Bash installed.</li> <li>If you are using Linux, make sure you have the <code>ssh-agent</code> package installed.</li> <li>If you are using macOS, you can use the built-in <code>ssh-agent</code>.</li> <li>Open Terminal and run:     <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\n</code></pre></li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/#6-add-your-ssh-to-github","title":"6. Add your SSH to GitHub","text":"<ol> <li>Copy your public key to your clipboard:   <pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub  # macOS\ncat ~/.ssh/id_rsa.pub       # Linux/Windows, then copy manually\n</code></pre></li> <li>Go to GitHub site &gt; Settings &gt; SSH and GPG keys &gt; New SSH key.</li> <li>Paste your key, give it a title, and save.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#7-test-your-setup","title":"7. Test Your Setup","text":"<ul> <li>Run the following command to test your SSH connection:</li> </ul> <pre><code>ssh -T git@github.com\n</code></pre> <p>You should see a message like:</p> <pre><code>Hi &lt;username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/","title":"Creating a GitHub Repository Using GitHub Copilot MCP Extension in VS Code","text":"<ul> <li>This guide explains in detail how to create a new GitHub repository using the GitHub Copilot Model Context Protocol (MCP) extension installed in Visual Studio Code. </li> <li>The MCP extension allows you to automate repository management tasks, including repository creation, directly from the VS Code interface using natural language prompts.</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>Visual Studio</code> Code installed on your computer</li> <li>The <code>GitHub Copilot MCP</code> extension installed in VS Code</li> <li>A <code>GitHub account</code> with permission to create repositories</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#1-install-mcp-extension","title":"1. Install (MCP Extension)","text":"<ol> <li>Open Visual Studio Code.</li> <li>Go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on Mac).</li> <li>Search for <code>GitHub Copilot MCP</code> and click Install, or go to https://code.visualstudio.com/mcp</li> <li>Verify the installation by checking if the extension appears in the list of installed extensions.</li> <li>Verify the MCP server by opening <code>GitHub Copilot chat</code>, clicking on the settings icon, and ensuring the server status is \u201cRunning\u201d.</li> </ol>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#2-authenticate-with-github","title":"2. Authenticate with GitHub","text":"<ol> <li>After installation, you may be prompted to sign in to your GitHub account.</li> <li>Follow the on-screen instructions to complete authentication.</li> </ol>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#3-open-the-copilot-chat","title":"3. Open the Copilot Chat","text":"<ul> <li>Click on the Copilot icon in the sidebar or open the Copilot Chat panel from the Command Palette (<code>Cmd+Shift+P</code> &gt; \u201cCopilot: Chat\u201d)</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#4-create-repo-from-prompt","title":"4. Create repo from Prompt","text":"<ul> <li>In the Copilot Chat panel, enter a prompt such as:</li> </ul> <p>Prompt to create GitHub repository using GitHub Copilot MCP</p> <pre><code>Using GitHub Copilot MCP\nCreate a new GitHub repository named \"GitLab-MCP-Repo\"\nMake it public and add a README and a Python .gitignore\nAdd policy to protect the 'main' branch\n</code></pre> <ul> <li>You can customize the prompt to include details like description, visibility (public/private).license, and more. Here are some example prompts:</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#5-verify-vscode","title":"5. Verify (VsCode)","text":"<ul> <li>In the VsCode Github Copilot Chat panel, you should see something like:</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#6-verify-github","title":"6. Verify (GitHub)","text":"<ul> <li>Navigate to your GitHub account and go to the \u201cRepositories\u201d tab.</li> <li>You should see the newly created repository \u201cGitLab-MCP-Repo\u201d listed there.</li> <li>Click on the repository to view its contents and verify that the <code>README</code> and <code>.gitignore</code> files have been created.</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#references","title":"References","text":"<ul> <li>GitHub Copilot MCP Documentation</li> <li>GitHub Copilot in VS Code</li> </ul> <p>With the Copilot MCP extension in VS Code, you can create and manage repositories using simple, natural language prompts\u2014no manual API calls required!</p>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/","title":"Creating a GitHub Repository Using the GitHub Website","text":"<ul> <li>This guide will walk you through the process of creating a new repository on GitHub using the web interface. </li> <li>Follow the steps below to set up your project repository quickly and efficiently.</li> </ul>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>A web browser (e.g., Chrome, Firefox, Safari)</li> </ul>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#1-creating-a-new-repository","title":"1. Creating a New Repository","text":"<ol> <li>Open your web browser and go to https://github.com.</li> <li>Click Sign in at the top right corner and enter your credentials.</li> <li>Once logged in, click the <code>Repositories</code> tab.</li> <li>Click on the New button to create a new repository.</li> <li>Fill in the repository details as prompted.<ul> <li>Owner: Choose your personal account or an organization you belong to.</li> <li>Repository name: Enter a unique name for your repository (e.g., <code>my-first-repo</code>).</li> <li>Description (optional): Add a short description of your project.</li> <li>Visibility:<ul> <li>Public: Anyone can see this repository.</li> <li>Private: Only you and people you explicitly share with can see this repository.</li> </ul> </li> <li>(Optional) Initialize this repository with:</li> <li>Add a README file: Recommended for project documentation.</li> <li>.gitignore: Choose a template if you want to ignore certain files.</li> <li>Choose a license: Select a license for your project.</li> </ul> </li> </ol>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#2-create-the-repository","title":"2: Create the Repository","text":"<ol> <li>Review your settings.</li> <li>Click the Create repository button at the bottom of the page.</li> </ol>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Creating a new repository</li> <li>GitHub Docs: Managing repository settings</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/","title":"Creating a GitHub Repository using <code>gh</code>","text":"<ul> <li>This guide explains two ways to create a repository on GitHub using GitHub CLI (<code>gh</code>).</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>GitHub CLI (<code>gh</code>) installed</li> <li>Git installed (Download here)</li> <li>Authentication with <code>gh auth login</code></li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#1-authenticating-with-github-cli-gh","title":"1. Authenticating with GitHub CLI (<code>gh</code>)","text":"<ul> <li>Open your terminal and authenticate if you haven\u2019t already.</li> <li> <p>Execute the following and follow the prompts to log in via browser or SSH key.       <pre><code>gh auth login\n</code></pre></p> <pre><code>### Authenticating with GitHub CLI\n## You should see prompts like these:\n\n? Where do you use GitHub? GitHub.com\n? What is your preferred protocol for Git operations on this host? SSH\n? Upload your SSH public key to your GitHub account? /Users/xxxx/.ssh/id_rsa.pub\n? Title for your SSH key: GitHub CLI\n? How would you like to authenticate GitHub CLI? Login with a web browser\n\n! First copy your one-time code: XXXX-XXXX\nPress Enter to open https://github.com/login/device in your browser... \n</code></pre> </li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#2-create-a-new-repository","title":"2. Create a new repository:","text":"<pre><code>### Creating a new repository\ngh repo                       \\\n   create my-first-repo       \\\n   --description \"My gh repo\" \\\n   --add-readme               \\\n   --public                   \\\n   --clone\n</code></pre> <pre><code># You should see output like this:\n\u2713 Created repository nirgeier/my-first-repo on github.com\nhttps://github.com/nirgeier/my-first-repo\nCloning into 'my-first-repo'...\n</code></pre>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#3-verify-creation","title":"3. Verify creation:","text":"<pre><code># Verify the repository exists\ngh repo view my-first-repo --web\n</code></pre> <ul> <li>This opens your new repository in your browser.</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub CLI Docs: <code>gh repo create</code></li> </ul>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/","title":"Cloning a GitHub Repository","text":"<p>This guide explains how to clone a repository from GitHub to your local machine using the GitHub website and Git.</p>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed on your computer (Download Git)</li> <li>A GitHub account</li> </ul>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#step-1-find-the-repository","title":"Step 1: Find the Repository","text":"<ol> <li>Go to https://github.com and log in.</li> <li>Navigate to the repository you want to clone.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#step-2-copy-the-repository-url","title":"Step 2: Copy the Repository URL","text":"<ol> <li>Click the green Code button on the repository page.</li> <li>Choose the desired protocol:</li> <li>HTTPS (recommended for most users)</li> <li>SSH (requires SSH key setup)</li> <li>GitHub CLI</li> <li>Click the clipboard icon to copy the URL.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#step-3-clone-the-repository-locally","title":"Step 3: Clone the Repository Locally","text":"<ol> <li>Open your terminal or command prompt.</li> <li>Run the following command, replacing <code>&lt;URL&gt;</code> with the copied repository URL:</li> </ol> <pre><code>git clone &lt;URL&gt;\n</code></pre> <ol> <li>A new folder with the repository\u2019s name will be created in your current directory.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#step-4-start-working","title":"Step 4: Start Working","text":"<ol> <li>Change into the repository directory:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>You can now start working with the code locally.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Cloning a repository</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/03-Making-Changes/","title":"Making Changes in a GitHub Repository","text":"<p>This guide explains how to make changes to files in your local copy of a GitHub repository.</p>"},{"location":"001-Working-With-Repo/03-Making-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>A cloned copy of the repository on your computer</li> <li>A text editor or IDE</li> </ul>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-1-open-the-repository","title":"Step 1: Open the Repository","text":"<ol> <li>Open your terminal and navigate to the repository folder:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>Open the project in your preferred editor (e.g., VS Code, Atom, Sublime Text).</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-2-edit-files","title":"Step 2: Edit Files","text":"<ol> <li>Use your editor to add, modify, or delete files as needed.</li> <li>Save your changes.</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-3-check-status","title":"Step 3: Check Status","text":"<ol> <li>In the terminal, run:    <pre><code>git status\n</code></pre></li> <li>This will show which files have been modified, added, or deleted.</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-4-review-changes","title":"Step 4: Review Changes","text":"<ul> <li>Review your changes in the editor or by using:   <pre><code>git diff\n</code></pre></li> </ul>"},{"location":"001-Working-With-Repo/03-Making-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Making changes to a file</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/04-Committing-Changes/","title":"Committing Changes in a GitHub Repository","text":"<p>This guide explains how to commit your changes to a local GitHub repository using Git.</p>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Changes made to files in your local repository</li> <li>Git installed on your computer</li> </ul>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-1-stage-your-changes","title":"Step 1: Stage Your Changes","text":"<ol> <li>Open your terminal and navigate to the repository folder.</li> <li>To stage all changes, run:    <pre><code>git add .\n</code></pre>    Or, to stage specific files:    <pre><code>git add &lt;filename&gt;\n</code></pre></li> </ol>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-2-commit-the-changes","title":"Step 2: Commit the Changes","text":"<ol> <li>Run the following command, replacing the message with a short description of your changes:    <pre><code>git commit -m \"Your commit message here\"\n</code></pre></li> </ol>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-3-check-commit-history","title":"Step 3: Check Commit History","text":"<ul> <li>To view your commit history, run:   <pre><code>git log --oneline\n</code></pre></li> </ul>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Committing changes to a repository</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/","title":"Pushing Changes to GitHub","text":"<p>This guide explains how to push your local commits to a remote GitHub repository.</p>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Committed changes in your local repository</li> <li>Remote repository set up (e.g., on GitHub)</li> <li>Git installed on your computer</li> </ul>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-1-check-remote-repository","title":"Step 1: Check Remote Repository","text":"<ol> <li>In your terminal, run:    <pre><code>git remote -v\n</code></pre></li> <li>Ensure the correct remote URL is set (usually named <code>origin</code>).</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-2-push-your-changes","title":"Step 2: Push Your Changes","text":"<ol> <li>To push your changes to the main branch, run:    <pre><code>git push origin main\n</code></pre>    Replace <code>main</code> with your branch name if different.</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-3-verify-on-github","title":"Step 3: Verify on GitHub","text":"<ol> <li>Go to your repository page on GitHub.</li> <li>Confirm that your changes appear in the file list and commit history.</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Pushing commits to a remote repository</li> </ul> <p>End of Guide</p>"}]}