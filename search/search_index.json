{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Labs: List of Tasks","text":""},{"location":"#00-setup","title":"00-Setup","text":"<p> Setup (Overview) 1. Install Tools 2. Setup GitHub </p>"},{"location":"#01-working-with-repo","title":"01-Working-With-Repo","text":"<p> Working-With-Repo (Overview) 1a. Creating a Repository (Web) 1b. Creating a Repository (MCP) 1c. Creating a Repository (gh) 2. Cloning a Repository 3. Making Changes </p>"},{"location":"#02-working-with-pr","title":"02-Working-With-PR","text":"<p> Pull Requests (Overview) 1a. Creating a PR (Web) 1b. Creating PR (MCP) 2. PR - Track Changes 3. PR - Commit Changes 4. PR - Code Review 5. PR - Track Review 6. PR - Template 7. PR - CODEOWNERS </p>"},{"location":"#03-configuration","title":"03-Configuration","text":"<p> Configuration (Overview) 1. Template Repository 2. Ruleset 3. CodeScan 4. Collaboration</p>"},{"location":"00-Setup/","title":"Lab 00: Setup","text":"<p>\u2003\u2003\u2699\ufe0f\u2003This lab will guide you through the essential steps to prepare your environment for working with Git and GitHub.  \u2003\u2003\u2699\ufe0f\u2003By the end of this lab, you will have the necessary tools installed and your GitHub account configured. \u2003\u2003\u2699\ufe0f\u2003After completing this lab, you will be prepared to start working with repositories.</p>"},{"location":"00-Setup/#lab-contents","title":"Lab Contents","text":""},{"location":"00-Setup/#01-install-tools","title":"01. Install Tools:","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Learn how to install Git on macOS, Windows, or Linux. \u2003\u2003\ud83d\udcd4\u2003Optionally install the GitHub CLI (<code>gh</code>) for advanced GitHub interactions from your terminal. \u2003\u2003\ud83d\udcd4\u2003Configure your Git identity (name and email) for commit attribution.</p>"},{"location":"00-Setup/#02-setup-github","title":"02. Setup GitHub:","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Step-by-step instructions to create and verify your GitHub account \u2003\u2003\ud83d\udcd4\u2003Personalize your GitHub profile  \u2003\u2003\ud83d\udcd4\u2003Generate and add SSH keys for secure authentication \u2003\u2003\ud83d\udcd4\u2003Add your SSH key to GitHub and test your connection   </p>"},{"location":"00-Setup/#quick-links","title":"Quick Links","text":"<p> Install Tools Setup GitHub</p>"},{"location":"00-Setup/#summary","title":"Summary","text":"<p>This lab ensures you are ready to use Git and GitHub by:</p> <p>\u2003\u2003\u2705\u2003Installing required tools (Git, GitHub CLI) \u2003\u2003\u2705\u2003Setting up your Git identity \u2003\u2003\u2705\u2003Creating and configuring your GitHub account  \u2003\u2003\u2705\u2003Setting up SSH keys for secure, passwordless authentication  </p>"},{"location":"00-Setup/01-Install-Tools/","title":"Installing Tools","text":"<p>About this Guide</p> <p>This guide will walk you through installing git, creating a GitHub account and configuring it for the first time.</p>"},{"location":"00-Setup/01-Install-Tools/#1-installing-git","title":"1. Installing Git","text":"<ul> <li>First, you need to install Git locally.</li> </ul> <p>Installing Git</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># Requires [Homebrew](https://brew.sh/)\nbrew install git\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install git\n</code></pre></p>"},{"location":"00-Setup/01-Install-Tools/#2-installing-gh","title":"2. Installing <code>gh</code>","text":"<ul> <li>To work with GitHub from your computer, you can use the optional GitHub CLI (<code>gh</code>) tool to interact with GitHub directly from your terminal.</li> <li>Click on the section below to expand it</li> </ul> <p>Installing GitHub CLI</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># Requires [Homebrew](https://brew.sh/)\nbrew install gh\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install gh\n</code></pre></p>"},{"location":"00-Setup/01-Install-Tools/#3-set-up-your-git-identity","title":"3. Set Up Your Git Identity","text":"<ul> <li>In order to use Git and GitHub effectively, you need to configure your Git identity.</li> <li>Your Git identity is defined by your name and email address, which will be associated with your commits.</li> <li> <p>Open your terminal and run the following commands to set your global Git configuration:    <pre><code># Configure Git with your user information\n# Replace with the name and email you used for GitHub.\ngit config --global user.name \"&lt;Your Name&gt;\"\ngit config --global user.email \"&lt;your-email@example.com&gt;\"\n</code></pre></p> <pre><code># Example:\ngit config --global user.name \"Nir Geier\"\ngit config --global user.email \"nir.geier@gmail.com\"\n</code></pre> </li> </ul>"},{"location":"00-Setup/01-Install-Tools/#4-tools-used","title":"4. Tools Used","text":"<ul> <li>GitHub Web: Web browser and GitHub account</li> <li>GitHub CLI: GitHub CLI installed (<code>gh</code> command)</li> <li>GitHub MCP: VS Code with GitHub Copilot MCP extension</li> </ul>"},{"location":"00-Setup/01-Install-Tools/#feature-comparison","title":"Feature Comparison","text":"Feature GitHub Web GitHub CLI GitHub MCP Ease of Use Beginner-friendly Developer-focused AI-assisted Speed Medium Fast Very Fast Automation Limited High Very High Customization Good Excellent Good Offline Capability No Yes No Bulk Operations No Yes Limited"},{"location":"00-Setup/02-Setup-GitHub/","title":"Setup GitHub","text":"<p>About this Guide</p> <p>This guide will walk you through setting up your GitHub account and configuring it for the first time.</p>"},{"location":"00-Setup/02-Setup-GitHub/#1-create-github-account","title":"1. Create GitHub Account","text":"<ol> <li>Go to https://github.com/.</li> <li>Click Sign up in the top-right corner.</li> <li>Enter your email address and click Continue.</li> <li>Create a strong password and click Continue.</li> <li>Choose a username (this will be your public identity on GitHub).</li> <li>Follow the prompts to verify your account (you may need to solve a puzzle or enter a code sent to your email).</li> <li>Choose your plan (the free plan is sufficient for most users).</li> <li>Complete the setup by answering a few questions (optional) and click Complete setup.</li> </ol>"},{"location":"00-Setup/02-Setup-GitHub/#2-verify-your-email-address","title":"2. Verify Your Email Address","text":"<ol> <li>Check your email inbox for a message from GitHub.</li> <li>Click the verification link in the email to activate your account.</li> </ol>"},{"location":"00-Setup/02-Setup-GitHub/#3-set-up-your-profile","title":"3. Set Up Your Profile","text":"<ol> <li>Click your profile icon in the top-right and select Your profile.</li> <li>Click Edit profile to add your name, bio, location, and profile picture.</li> <li>Save your changes.</li> </ol>"},{"location":"00-Setup/02-Setup-GitHub/#4-generate-ssh-key","title":"4. Generate SSH Key","text":"<ul> <li>When working with Git and GitHub, it\u2019s a good idea to set up SSH keys for secure authentication.</li> <li> <p>SSH keys are a pair of cryptographic keys that can be used to authenticate to GitHub without needing to enter your username and password every time.</p> </li> <li> <p>In your terminal, run:   <pre><code># Generate a new SSH key\n# -C is optional for email association with your GitHub account\nssh-keygen -t rsa -C \"your-email@example.com\"\n</code></pre></p> </li> <li> <p>This will create two files:</p> File Description <code>~/.ssh/id_rsa</code> Your private key (keep this secret) <code>~/.ssh/id_rsa.pub</code> Your public key (can be shared) <pre><code># Example output\n$ ssh-keygen -t rsa -C \"your-email@example.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa\nYour public key has been saved in /root/.ssh/id_rsa.pub &lt;&lt;&lt; &lt;&lt;&lt; &lt;&lt;&lt; This is the key you need\nThe key fingerprint is:\nSHA256:47MfTsMWlEN8PYpSGvYWlLd4u4fE4njqHrs53+oxEZM your-email@example.com\nThe key`s randomart image is:\n+---[RSA 3072]----+\n|         oo. .   |\n|        o.=oo o  |\n|       . =E* o . |\n|        o.=++    |\n|        Sooo .   |\n|       . o.o+    |\n|        +oOo o   |\n|        oXo*o .  |\n|       oOO*...   |\n+----[SHA256]-----+\n</code></pre> </li> <li> <p>Press Enter to accept the default file location and do not set a passphrase or you will be prompted to enter it each time you use the key.</p> </li> </ul>"},{"location":"00-Setup/02-Setup-GitHub/#5-add-your-ssh-to-ssh-agent","title":"5. Add your SSH to ssh-agent","text":"<ul> <li>If you are using Windows, make sure you have Git Bash installed.</li> <li>If you are using Linux, make sure you have the <code>ssh-agent</code> package installed.</li> <li>If you are using macOS, you can use the built-in <code>ssh-agent</code>.</li> <li>Open Terminal and run:     <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\n</code></pre></li> </ul>"},{"location":"00-Setup/02-Setup-GitHub/#6-add-your-ssh-to-github","title":"6. Add your SSH to GitHub","text":"<ol> <li>Copy your public key to your clipboard:   <pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub  # macOS\ncat ~/.ssh/id_rsa.pub       # Linux/Windows, then copy manually\n</code></pre></li> <li>Go to GitHub site &gt; Settings &gt; SSH and GPG keys &gt; New SSH key.</li> <li>Paste your key, give it a title, and save.</li> </ol> <p>Adding ssh key using gh</p> <ul> <li>You can also use gh using: <code>gh repo deploy-key</code></li> <li>docs:  https://cli.github.com/manual/gh_ssh-key_add https://cli.github.com/manual/gh_repo_deploy-key</li> </ul>"},{"location":"00-Setup/02-Setup-GitHub/#7-test-your-setup","title":"7. Test Your Setup","text":"<ul> <li> <p>Run the following command to test your SSH connection:</p> <pre><code>ssh -T git@github.com\n</code></pre> </li> <li> <p>You should see a message like:</p> <pre><code>Hi &lt;username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre> </li> </ul>"},{"location":"01-Working-With-Repo/","title":"Lab 01: Working With Repositories","text":"<p>\u2003\u2699\ufe0f\u2003This lab guides you through the essential tasks for working with GitHub repositories   \u2003\u2699\ufe0f\u2003You will learn how to create, clone, modify, commit, and push changes to repositories using different methods and tools.</p>"},{"location":"01-Working-With-Repo/#lab-contents","title":"Lab Contents","text":""},{"location":"01-Working-With-Repo/#1-creating-a-repository","title":"1. Creating a Repository","text":""},{"location":"01-Working-With-Repo/#creating-a-repository-web","title":"Creating a Repository (Web)","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Learn how to create a new GitHub repository using the web interface \u2003\u2003\ud83d\udcd4\u2003Step-by-step guide through GitHub\u2019s repository creation form \u2003\u2003\ud83d\udcd4\u2003Configure repository settings, visibility, and initialization options</p>"},{"location":"01-Working-With-Repo/#creating-a-repository-mcp","title":"Creating a Repository (MCP)","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Create repositories using the GitHub Copilot Model Context Protocol (MCP) extension \u2003\u2003\ud83d\udcd4\u2003Automate repository management tasks directly from VS Code \u2003\u2003\ud83d\udcd4\u2003Use natural language prompts to create and configure repositories</p>"},{"location":"01-Working-With-Repo/#creating-a-repository-gh","title":"Creating a Repository (gh)","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Master the GitHub CLI (<code>gh</code>) for repository creation \u2003\u2003\ud83d\udcd4\u2003Create repositories from the command line with advanced options \u2003\u2003\ud83d\udcd4\u2003Integrate repository creation into your terminal workflow</p>"},{"location":"01-Working-With-Repo/#2-cloning-a-repository","title":"2. Cloning a Repository","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Download repositories from GitHub to your local machine \u2003\u2003\ud83d\udcd4\u2003Use various cloning methods (HTTPS, SSH, GitHub CLI) \u2003\u2003\ud83d\udcd4\u2003Understand the relationship between local and remote repositories</p>"},{"location":"01-Working-With-Repo/#3-making-changes","title":"3. Making Changes","text":"<p>\u2003\u2003\ud83d\udcd4\u2003Learn how to modify files in your local repository \u2003\u2003\ud83d\udcd4\u2003Work with Git branches for organized development \u2003\u2003\ud83d\udcd4\u2003Commit and push changes back to GitHub   </p>"},{"location":"01-Working-With-Repo/#summary","title":"Summary","text":"<p>By completing this lab, you will be able to:</p> <p>\u2003\u2003\u2705\u2003Create new repositories using multiple methods (MCP, Web, CLI) \u2003\u2003\u2705\u2003Clone repositories to your local machine \u2003\u2003\u2705\u2003Make and track changes to files \u2003\u2003\u2705\u2003Commit your work with meaningful messages \u2003\u2003\u2705\u2003Push your changes to GitHub for collaboration</p>"},{"location":"01-Working-With-Repo/01a-Creating-Repo-Web/","title":"Creating a GitHub Repository Using Web","text":"<p>\u2699\ufe0f\u2003This guide will walk you through the process of creating a new repository on GitHub using the web interface.  \u2699\ufe0f\u2003 Follow the steps below to set up your project repository quickly and efficiently.</p>"},{"location":"01-Working-With-Repo/01a-Creating-Repo-Web/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>A web browser (e.g., Chrome, Firefox, Safari)</li> </ul>"},{"location":"01-Working-With-Repo/01a-Creating-Repo-Web/#1-creating-a-new-repository","title":"1. Creating a New Repository","text":"<ol> <li>Open your web browser and go to https://github.com.</li> <li>Click Sign in at the top right corner and enter your credentials.</li> <li>Once logged in, click the <code>Repositories</code> tab.</li> <li>Click on the New button to create a new repository.</li> <li>Fill in the repository details as prompted.<ul> <li>Owner: Choose your personal account or an organization you belong to.</li> <li>Repository name: Enter a unique name for your repository (e.g., <code>my-first-repo</code>).</li> <li>Description (optional): Add a short description of your project.</li> <li>Visibility:<ul> <li>Public: Anyone can see this repository.</li> <li>Private: Only you and people you explicitly share with can see this repository.</li> </ul> </li> <li>(Optional) Initialize this repository with:</li> <li>Add a README file: Recommended for project documentation.</li> <li>.gitignore: Choose a template if you want to ignore certain files.</li> <li>Choose a license: Select a license for your project.</li> </ul> </li> </ol>"},{"location":"01-Working-With-Repo/01a-Creating-Repo-Web/#2-create-the-repository","title":"2: Create the Repository","text":"<ol> <li>Review your settings.</li> <li>Click the Create repository button at the bottom of the page.</li> </ol>"},{"location":"01-Working-With-Repo/01a-Creating-Repo-Web/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Creating a new repository</li> <li>GitHub Docs: Managing repository settings</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/","title":"Creating a GitHub Repository Using GitHub MCP","text":"<p>\u2699\ufe0f\u2003This guide explains in detail how to create a new GitHub repository using the GitHub Copilot Model Context Protocol (MCP) extension installed in Visual Studio Code.  \u2699\ufe0f\u2003The MCP extension allows you to automate repository management tasks, including repository creation, directly from the VS Code interface using natural language prompts.</p>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>Visual Studio</code> Code installed on your computer</li> <li>The <code>GitHub Copilot MCP</code> extension installed in VS Code</li> <li>A <code>GitHub account</code> with permission to create repositories</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#1-install-mcp-extension","title":"1. Install (MCP Extension)","text":"<ol> <li>Open Visual Studio Code.</li> <li>Go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on Mac).</li> <li>Search for <code>GitHub Copilot MCP</code> and click Install, or go to https://code.visualstudio.com/mcp</li> <li>Verify the installation by checking if the extension appears in the list of installed extensions.</li> <li>Verify the MCP server by opening <code>GitHub Copilot chat</code>, clicking on the settings icon, and ensuring the server status is \u201cRunning\u201d.</li> </ol>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#2-authenticate-with-github","title":"2. Authenticate with GitHub","text":"<ol> <li>After installation, you may be prompted to sign in to your GitHub account.</li> <li>Follow the on-screen instructions to complete authentication.</li> </ol>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#3-open-the-copilot-chat","title":"3. Open the Copilot Chat","text":"<ul> <li>Click on the Copilot icon in the sidebar or open the Copilot Chat panel from the Command Palette (<code>Cmd+Shift+P</code> &gt; \u201cCopilot: Chat\u201d)</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#4-create-repo-from-prompt","title":"4. Create repo from Prompt","text":"<ul> <li>In the Copilot Chat panel, enter a prompt such as:</li> </ul> <p>Prompt to create GitHub repository using GitHub Copilot MCP</p> <pre><code>Using GitHub Copilot MCP\nCreate a new GitHub repository named \"GitLab-MCP-Repo\"\nMake it public and add a README and a Python .gitignore\nAdd policy to protect the 'main' branch\n</code></pre> <ul> <li>You can customize the prompt to include details like description, visibility (public/private).license, and more. Here are some example prompts:</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#5-verify-vscode","title":"5. Verify (VsCode)","text":"<ul> <li>In the VsCode Github Copilot Chat panel, you should see something like:</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#6-verify-github","title":"6. Verify (GitHub)","text":"<ul> <li>Navigate to your GitHub account and go to the \u201cRepositories\u201d tab.</li> <li>You should see the newly created repository \u201cGitLab-MCP-Repo\u201d listed there.</li> <li>Click on the repository to view its contents and verify that the <code>README</code> and <code>.gitignore</code> files have been created.</li> </ul>"},{"location":"01-Working-With-Repo/01b-Creating-Repo-MCP/#references","title":"References","text":"<ul> <li>GitHub Copilot MCP Documentation</li> <li>GitHub Copilot in VS Code</li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/","title":"Creating a GitHub Repository Using <code>gh</code>","text":"<ul> <li>This guide explains two ways to create a repository on GitHub using GitHub CLI (<code>gh</code>).</li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>GitHub CLI (<code>gh</code>) installed</li> <li>Git installed (Download here)</li> <li>Authentication with <code>gh auth login</code></li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/#1-authenticating-with-gh","title":"1. Authenticating with (<code>gh</code>)","text":"<ul> <li>Open your terminal and authenticate if you haven\u2019t already.</li> <li> <p>Execute the following and follow the prompts to log in via browser or SSH key.       <pre><code>gh auth login\n</code></pre></p> <pre><code>### Authenticating with GitHub CLI\n## You should see prompts like these:\n\n? Where do you use GitHub? GitHub.com\n? What is your preferred protocol for Git operations on this host? SSH\n? Upload your SSH public key to your GitHub account? /Users/xxxx/.ssh/id_rsa.pub\n? Title for your SSH key: GitHub CLI\n? How would you like to authenticate GitHub CLI? Login with a web browser\n\n! First copy your one-time code: XXXX-XXXX\nPress Enter to open https://github.com/login/device in your browser... \n</code></pre> </li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/#2-create-a-new-repository","title":"2. Create a new repository:","text":"<ul> <li> <p>Create a new repository using the following command:</p> <pre><code>### Creating a new repository\ngh repo                       \\\n   create my-first-repo       \\\n   --description \"My gh repo\" \\\n   --add-readme               \\\n   --public                   \\\n   --clone\n</code></pre> </li> <li> <p>You should see output like this:</p> <pre><code># You should see output like this:\n\u2713 Created repository nirgeier/my-first-repo on github.com\nhttps://github.com/nirgeier/my-first-repo\nCloning into 'my-first-repo'...\n</code></pre> </li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/#3-verify-creation","title":"3. Verify creation:","text":"<ul> <li> <p>Validate the repository creation:</p> <pre><code># Verify the repository exists\ngh repo view my-first-repo --web\n</code></pre> </li> <li> <p>This should open your new repository in your browser.</p> </li> </ul>"},{"location":"01-Working-With-Repo/01c-Creating-Repo-gh/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub CLI Docs: <code>gh repo create</code></li> </ul>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/","title":"Cloning a GitHub Repository","text":"<ul> <li>This guide explains how to clone a repository from GitHub to your local machine using the GitHub website and Git.</li> <li>Clone \u201cdownloading\u201d the repository to your local machine.</li> <li>This allows you to work on the project locally and push changes back to the remote repository.</li> </ul>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed on your computer (Download Git)</li> <li>A GitHub account</li> </ul>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#1-find-the-repository","title":"1: Find the Repository","text":"<ol> <li>Go to https://github.com and log in.</li> <li>Navigate to the repository you want to clone.</li> </ol>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#2-copy-the-repository-url","title":"2: Copy the Repository URL","text":"<ol> <li>Click the green Code button on the repository page.</li> <li>Choose the desired protocol:</li> <li>HTTPS (recommended for most users)</li> <li>SSH (requires SSH key setup)</li> <li>GitHub CLI</li> <li>Click the clipboard icon to copy the URL.</li> </ol>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#3-clone-the-repository-locally","title":"3: Clone the Repository Locally","text":"<ol> <li>Open your terminal or command prompt.</li> <li>Run the following command, replacing <code>&lt;URL&gt;</code> with the copied repository URL:</li> <li>A new folder with the repository\u2019s name will be created in your current directory.    <pre><code>git clone &lt;URL&gt; [&lt;local-directory&gt;]\n</code></pre></li> </ol>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#4-start-working","title":"4: Start Working","text":"<ol> <li>Change into the repository directory:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>You can now start working with the code locally.</li> </ol>"},{"location":"01-Working-With-Repo/02-Cloning-Repo/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Cloning a repository</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/","title":"Making Changes in a GitHub Repository","text":"<ul> <li>This guide explains how to make changes to files in your local copy of a GitHub repository.</li> <li>We will use new branch for our changes</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>A cloned copy of the repository on your computer</li> <li>A text editor or IDE</li> <li>Git knowledge - working with branches</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-1-open-the-repository","title":"Step 1: Open the Repository","text":"<ul> <li>Open your terminal and navigate to the repository folder:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>Open the project in your IDE (e.g., VS Code).</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-2-edit-files","title":"Step 2: Edit Files","text":"<ol> <li>Create a new branch for your changes:    <pre><code>git checkout -b &lt;new-branch-name&gt;\n</code></pre></li> <li>Use your editor to add, modify, or delete files as needed.</li> <li>Save your changes.</li> </ol>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-3-stage-changes","title":"Step 3: Stage Changes","text":"<ul> <li> <p>Stage the changes for commit:</p> <pre><code>git add .\n</code></pre> </li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-4-check-status","title":"Step 4: Check Status","text":"<ul> <li> <p>Track changes made on your branch:</p> </li> <li> <p>In the terminal, run:    <pre><code>git status\n</code></pre></p> </li> <li>In your IDE, check the Git panel to see the changes.</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-5-commit-the-changes","title":"Step 5: Commit the Changes","text":"<ol> <li>Run the following command, replacing the message with a short description of your changes:    <pre><code>git commit -m \"Your commit message here\"\n</code></pre></li> </ol>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-6-check-commit-history","title":"Step 6: Check Commit History","text":"<ul> <li>To view your commit history, run:   <pre><code>git log --oneline\n</code></pre></li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-7-check-remote-repository","title":"Step 7: Check Remote Repository","text":"<ul> <li>In your terminal, run:    <pre><code>git remote -v\n</code></pre></li> <li>Ensure the correct remote URL is set (usually named <code>origin</code>).</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-8-push-your-changes","title":"Step 8: Push Your Changes","text":"<ul> <li>To push your changes to the main branch, run:    <pre><code>git push origin &lt;branch-name&gt;\n</code></pre></li> <li>You will be prompted to set the upstream branch.</li> <li>Follow the on-screen instructions to complete the process.</li> </ul>"},{"location":"01-Working-With-Repo/03-Making-Changes/#step-9-verify-on-github","title":"Step 9: Verify on GitHub","text":"<ol> <li>Go to your repository page on GitHub.</li> <li>Confirm that you see your branch listed in the branch dropdown or in the main branch view.</li> </ol>"},{"location":"02-Working-With-PR/","title":"Lab 02: Working with Pull Requests","text":"<p>\u2699\ufe0f\u2003This lab covers the complete workflow of working with pull requests in GitHub</p>"},{"location":"02-Working-With-PR/#prerequisites","title":"Prerequisites","text":"<p>Before starting this lab, ensure you have completed:</p> <ul> <li>Lab 00: Setup </li> <li>Lab 01: Working with Repositories </li> </ul>"},{"location":"02-Working-With-PR/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>A repository with at least one branch containing changes</li> <li>Proper authentication setup with GitHub</li> <li>Basic understanding of Git branching concepts</li> </ul>"},{"location":"02-Working-With-PR/#lab-contents","title":"Lab Contents","text":"<p> 1. Opening PR Opening PR - Web Opening PR - MCP 2. Tracking Changes in a PR 3. Committing Changes in a PR 4. Code Review (Web) 5. Tracking Review Feedback 6. PR Template Usage 7. Implementing CODEOWNERS </p>"},{"location":"02-Working-With-PR/#learning-objectives","title":"Learning Objectives","text":"<p>By completing this lab, you will be able to:</p> <p> Pull Request Creation {class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Create pull requests using GitHub Web, CLI, and MCP{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Write effective PR titles and descriptions{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Add appropriate reviewers and labels</p> <p> Code Review Process {class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Conduct thorough code reviews{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Provide constructive feedback{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Manage the approval workflow{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Handle review responses and iterations</p> <p> Collaboration Best Practices {class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Follow team workflows and conventions{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Use advanced GitHub features effectively{class=\u201dwhite-text\u201d} \u2003\u2003\u2705\u2003Troubleshoot common PR issues</p>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/","title":"Opening Pull Requests via GitHub Web Interface","text":"<p>This guide explains how to create pull requests using the GitHub web interface. This is the most visual and user-friendly method for creating pull requests.</p>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/#prerequisites","title":"Prerequisites","text":"<ul> <li>A repository with at least one branch containing changes</li> <li>Proper authentication setup with GitHub</li> <li>Your feature branch has been pushed to the remote repository</li> </ul>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/#1-navigate-to-pull-request","title":"1. Navigate to Pull Request","text":"<ol> <li>Go to your repository on GitHub.com</li> <li>Navigate to the \u201cPull requests\u201d tab</li> </ol>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/#2-create-pull-request","title":"2. Create Pull Request","text":"<ol> <li>Click the \u201cCompare &amp; pull request\u201d button (appears automatically after pushing a new branch)</li> </ol> <p>]</p> <p>OR</p> <ol> <li>Navigate manually:</li> <li>Click the \u201cPull requests\u201d tab</li> <li>Click \u201cNew pull request\u201d</li> <li>Select the base branch (usually <code>main</code> or <code>master</code>)</li> <li>Select your feature branch as the compare branch</li> <li>Click on <code>Create pull request</code></li> </ol> <p>]</p>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/#3-fill-pull-request-details","title":"3. Fill Pull Request Details","text":"<ol> <li>Title: Provide a clear, descriptive title       <pre><code>Example: Add user authentication feature\n</code></pre></li> <li> <p>Description: Include detailed information:</p> <p>For example:  </p> <ul> <li>Why the change is needed.  </li> <li>What changes were made. </li> <li>How to test the changes. </li> <li>Additional context or screenshots. </li> </ul> <pre><code>## Description\nThis PR is from GitHub Workshop.\n\n## Changes Made\n- Added change line\n- Implemented creation of PR\n- Added description to the PR\n\n## Testing\n- [x] Unit tests pass\n- [x] Manual testing completed\n- [x] No breaking changes\n\n## Screenshots\n(Add relevant screenshots if applicable)\n</code></pre> </li> <li> <p>Reviewers: Add reviewers by typing their GitHub usernames  </p> </li> <li> <p>Assignees: Assign yourself or team members.  </p> </li> <li> <p>Labels: Add appropriate labels (feature, bugfix, etc.).  </p> </li> <li> <p>Projects: Link to project boards if applicable.  </p> </li> <li> <p>Milestone: Associate with project milestones.  </p> </li> </ol>"},{"location":"02-Working-With-PR/01a-Creating-PR-Web/#4-choose-pr-type","title":"4: Choose PR Type","text":"<ol> <li> <p>Choose PR type:</p> PR Type Description Create pull request For standard PRs ready for review. Create draft pull request For work-in-progress. </li> <li> <p>Click the \u201cCreate pull request\u201d button to submit your PR.</p> </li> </ol>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/","title":"Opening Pull Requests via GitHub MCP Extension","text":"<ul> <li>This guide explains how to create and manage pull requests using the GitHub Model Context Protocol (MCP). </li> <li>MCP allows you to create PRs using natural language commands.</li> </ul>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code installed</li> <li>GitHub Copilot MCP extension installed and configured (Including Authentication)</li> <li>Proper authentication setup with GitHub</li> <li>Your feature branch has been pushed to the remote repository</li> </ul>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#1-install-and-setup-mcp","title":"1. Install and Setup MCP","text":"<ol> <li>Open Visual Studio Code</li> <li>Go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on Mac)</li> <li>Search for <code>GitHub Copilot MCP</code> and click Install</li> <li>Verify the installation by checking if the extension appears in the list of installed extensions</li> </ol>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#2-authentication","title":"2. Authentication","text":"<ol> <li>After installation, you may be prompted to sign in to your <code>GitHub</code> account</li> <li>Follow the on-screen instructions to complete authentication</li> <li>Verify the MCP server by opening GitHub Copilot chat and checking the server status</li> </ol>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#3-create-pr-from-prompt","title":"3. Create PR from Prompt","text":"<ul> <li>In the Copilot Chat panel, enter a prompt such as:</li> </ul> <p>Prompt to create PR using GitHub Copilot MCP</p> <p>Using GitHub Copilot MCP    Create a new pull request from \u201cgit-labs-branch\u201d to \u201cmain\u201d    Title: \u201cAdd user authentication feature\u201d    Description: \u201cThis PR is auto generated using MCP\u201d    Add reviewers: @me    Add labels: mcp, bugfix, high-priority    Assign to: @me   </p> <ul> <li> <p>You can customize the prompt to include details like description, visibility (public/private).license, and more. Here are some example prompts:</p> <p></p> </li> </ul>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#4-updating-existing-prs-examples","title":"4. Updating Existing PRs Examples","text":"<p>Prompt to update PR using GitHub Copilot MCP</p> <pre><code>### 1. Update title\nUpdate my pull request title to \"Improved user authentication feature\"\n\n### 2. Add reviewers\nAdd reviewers alice.cooper and @backend-team to pull request #123 \n\n### 3. Update description\nUpdate PR #456 description to include:\n\"## Changes\n- Fixed validation bug\n- Added unit tests\n- Updated documentation\"\n\n### 4. Add commits\nIve made some changes to my feature branch. \nPlease update pull request #123 with these new commits.\n\n### 5. Add comment\nAdd a comment to my current pull request explaining that I've addressed the review feedback and added unit tests.\n</code></pre>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#5-viewing-pr-information","title":"5. Viewing PR Information","text":"<ul> <li>Keep working with the MCP to find out details about your pull requests</li> <li> <p>You can ask for information about your pull requests, such as:</p> <p></p> </li> </ul>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#6-ai-mcp-pr-prompts-suggestion","title":"6. AI MCP PR prompts Suggestion","text":"<p>Create PR from Templates</p> <pre><code>Create a pull request using our standard template:\n- Branch: feature/payment-integration\n- Title: Implement Stripe payment integration\n- Type: New feature\n- Include testing checklist\n- Add backend team as reviewers\n</code></pre> <p>Create PR for all my bug-fix</p> <pre><code>Create pull requests for all my feature branches that start with \"bugs\"\nUse template: \"Authentication improvements\"\nAdd security team as reviewers\n</code></pre> <p>Update PR</p> <pre><code>\"Update my PR title\"\n\"Add reviewers to PR #123\"\n\"Change PR description\"\n\"Convert draft to ready for review\"\n\"Add labels to my pull request\"\n</code></pre> <p>Automation Workflows</p> <pre><code># Automated PR creation for releases\n\"Create release PR from develop to main, title 'Release v2.1.0', add all team leads as reviewers\"\n\n# Hotfix workflows\n\"Create hotfix PR, title 'Critical security patch', add security team, mark as urgent\"\n</code></pre>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#best-practices-for-github-mcp","title":"Best Practices for GitHub MCP","text":""},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#workflow-integration","title":"Workflow Integration","text":"<ol> <li>Consistent Naming: Use consistent branch and PR naming conventions</li> <li>Template Usage: Develop standard prompts for your team</li> <li>Context Awareness: Provide relevant context in your requests</li> <li>Verification: Always review MCP suggestions before confirming</li> </ol>"},{"location":"02-Working-With-PR/01b-Creating-PR-MCP/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Copilot MCP Documentation</li> <li>VS Code GitHub Integration</li> <li>GitHub API Documentation</li> </ul>"},{"location":"02-Working-With-PR/02-PR-Track-Changes/","title":"Tracking Changes in a Pull Request","text":"<ul> <li>This guide explains how to review the changes of PR and update them.</li> </ul>"},{"location":"02-Working-With-PR/02-PR-Track-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code installed</li> <li>GitHub Copilot MCP extension installed and configured (Including Authentication)</li> <li>Proper authentication setup with GitHub</li> <li>Your feature branch has been pushed to the remote repository</li> </ul>"},{"location":"02-Working-With-PR/02-PR-Track-Changes/#1-review-changes-on-github","title":"1. Review Changes on GitHub","text":"<ul> <li> <p>Pull request sections</p> Tab Name Description Files Changed Shows a list of all the files modified in the pull request. You can click on each file to see the specific changes. Commits Lists all the commits made to the branch. You can click on each commit to view its details. Checks Displays the status of automated checks and tests run on the pull request. Conversation Shows the discussion and comments related to the pull request. </li> </ul> <ol> <li>Open your web browser and navigate to your GitHub repository.  </li> <li>Locate the pull request associated with your branch.  </li> <li>Click on the pull request to open its details page.  </li> <li>Review the changes. </li> </ol>"},{"location":"02-Working-With-PR/02-PR-Track-Changes/#2-review-pr-gui","title":"2. Review PR GUI","text":"<p>Task: Play with the PR GUI to get familiar with it</p> <ul> <li>Play with the PR GUI to get familiar with it</li> <li>Navigate between the different tabs</li> <li>Explore the different views and options available.</li> <li>Explore the buttons</li> </ul>"},{"location":"02-Working-With-PR/02-PR-Track-Changes/#3-make-manual-changes","title":"3. Make Manual Changes","text":"<p>Task: Make Manual Changes</p> <ul> <li>Change the reviewer</li> <li>Add new comments</li> <li>Add users as mention(s) by typing <code>@</code> at the comment window</li> <li>Add labels</li> <li>Add Assignees</li> <li>Add team as reviewers</li> <li>Change the PR title</li> <li>Change the base branch</li> <li>Close and Re-Open the PR</li> </ul>"},{"location":"02-Working-With-PR/03-PR-Commit-Changes/","title":"Adding and Tracking Changes with GitHub Pull Requests","text":"<ul> <li>This guide provides a step-by-step process for adding code, reviewing commits, adding more code, reviewing updates, and adding comments in a GitHub Pull Request (PR) web site.</li> </ul>"},{"location":"02-Working-With-PR/03-PR-Commit-Changes/#1-adding-code","title":"1. Adding Code","text":"<ol> <li> <p>Checkout your local branch:</p> <pre><code>git checkout branch-name\n</code></pre> </li> <li> <p>Make changes to your local repository files.</p> </li> <li> <p>Stage the changes:</p> <pre><code>git add .\n</code></pre> </li> <li> <p>Commit the changes with a descriptive message:</p> <pre><code>git commit -m \"Add initial implementation of feature\"\n</code></pre> </li> <li> <p>Push the changes to the remote branch:</p> <pre><code>git push origin branch-name\n</code></pre> </li> </ol>"},{"location":"02-Working-With-PR/03-PR-Commit-Changes/#2-reviewing-the-commits","title":"2. Reviewing the Commits","text":"<ol> <li>Navigate to your GitHub repository in a web browser.</li> <li>Open the pull request associated with your branch.</li> <li>Click on the Commits tab to view all commits made to the branch.</li> <li>Review the commit messages and details to ensure they accurately describe the changes.</li> <li></li> </ol>"},{"location":"02-Working-With-PR/03-PR-Commit-Changes/#3-adding-more-code","title":"3. Adding More Code","text":"<ol> <li>Make additional changes to your local repository files.</li> <li>Stage the changes:</li> </ol> <pre><code>git add .\n</code></pre> <ol> <li>Commit the changes with a descriptive message:</li> </ol> <pre><code>git commit -m \"Refactor code and fix bugs\"\n</code></pre> <ol> <li>Push the new changes to the same branch:</li> </ol> <pre><code>git push origin branch-name\n</code></pre>"},{"location":"02-Working-With-PR/03-PR-Commit-Changes/#4-reviewing-the-updates","title":"4: Reviewing the Updates","text":"<ol> <li>Refresh the pull request page on GitHub.</li> <li>Navigate to the Files Changed tab to review the updated changes.</li> <li>Verify that the new changes align with the pull request\u2019s goals and do not introduce issues.</li> </ol>"},{"location":"02-Working-With-PR/04-PR-Code-Review/","title":"Performing a Full Code Review on GitHub Web","text":"<p> This guide provides a detailed, step-by-step breakdown of how to perform a complete code review using the GitHub web interface.   It covers adding reviewers and teams, making comments, and submitting a review. Screenshots are referenced for clarity.</p>"},{"location":"02-Working-With-PR/04-PR-Code-Review/#1-add-reviewers-and-teams","title":"1. Add Reviewers and Teams","text":"<p>Note</p> <p>Teams must be configured in your GitHub organization to appear in the list.</p> <ol> <li>Go to your repository on GitHub</li> <li>Click on the \u201cPull requests\u201d tab</li> <li>Select the pull request you want to add reviewers to</li> <li>Look for the \u201cReviewers\u201d section in the right sidebar</li> <li>Click the gear icon (\u2699\ufe0f) next to \u201cReviewers\u201d</li> <li>Search for and select reviewers by:<ul> <li>Username</li> <li>Full name</li> <li>Team name (if you have access to teams) (e.g., <code>@organization/team-name</code>)</li> </ul> </li> <li>Click on the reviewer name to add them</li> </ol>"},{"location":"02-Working-With-PR/04-PR-Code-Review/#2-adding-comments","title":"2. Adding Comments","text":"<ol> <li>In the Files Changed tab, scroll through the list of changed files to locate the specific lines of code you want to comment on.</li> <li>Hover your mouse over the line number where you want to add feedback. </li> <li>A blue + icon will appear to the left of the line.</li> <li>Click the + icon to open the inline comment editor for that line or code block. </li> </ol> <p>Tip</p> <ul> <li>In the comment box, write your feedback, question, or suggestion.  You can use Markdown formatting, reference other issues or pull requests with <code>#</code>, and mention users or teams with <code>@</code>.</li> </ul> <ul> <li>You can also select multiple lines to comment on a code range.</li> </ul>"},{"location":"02-Working-With-PR/04-PR-Code-Review/#3-submit-comments","title":"3. Submit Comments","text":"<ol> <li>Choose how to submit your comment:<ul> <li>Click Add single comment to immediately post your feedback.</li> <li>Click Start a review if you want to leave multiple comments before submitting them all together as a review. This is useful for providing comprehensive feedback in one go.</li> </ul> </li> <li>If you started a review, continue adding comments throughout the code as needed. All comments will be collected in your pending review.</li> </ol>"},{"location":"02-Working-With-PR/04-PR-Code-Review/#4-review-changes","title":"4. Review Changes","text":"<ol> <li> <p>When finished, click the Review changes button at the top right of the Files Changed tab.    </p> Option Description Comment Submit your feedback without approving or requesting changes. Approve Indicate the code is ready to merge. Request changes Block merging until issues are addressed. (Summary comment) Optionally, add a summary comment for the overall review. </li> <li> <p>Click Submit review to finalize and send your comments to the pull request author and other reviewers.</p> </li> </ol> <p>PR Notes</p> <p>You can also add comments to entire files or outdated diffs by clicking the appropriate options in the Files Changed tab. All comments and review activity will appear in the Conversation tab for full visibility.</p> <p>Whenever you have an open PR on a specific branch, make sure to push your changes to the same branch as the pull request.   The pull request will automatically update with your new commits.</p>"},{"location":"02-Working-With-PR/05-PR-Track-Review/","title":"Track Review Status and Respond","text":"<ul> <li>This lab explains how to track a pull request\u2019s review status, respond to feedback, handle CI checks, and prepare a PR for merge.</li> </ul>"},{"location":"02-Working-With-PR/05-PR-Track-Review/#1-where-to-check-status","title":"1. Where to Check Status","text":"<p>Use these areas on the PR page to see review progress and merge readiness.</p> Area What you\u2019ll see Conversation tab Full timeline of activity (comments, reviews, commits, CI events) show open/resolved state and who resolved them. Reviewers (sidebar) Requested reviewers/teams, who approved, who requested changes, and \u201cRe-request review\u201d actions. Checks tab CI status, required and optional checks, and detailed logs for failures. Merge box (bottom) Mergeability summary: approvals required, checks passing/failing, branch conflicts, and protection rules. Files changed Open/Outdated/Resolved threads inline, \u201cViewed\u201d checkboxes, file filter, diff settings."},{"location":"02-Working-With-PR/05-PR-Track-Review/#2-respond-to-review-feedback","title":"2. Respond to Review Feedback","text":"<ol> <li>Open the Conversation tab and review all open threads that need action.</li> <li>Go to Files changed and expand files with comments.</li> <li>Play around with the review and reply/comment on the feedback.<ul> <li>Click Reply, answer/comment on the feedback.</li> <li>Accept a suggested change if provided.</li> <li>When required, click Resolve. </li> <li>Reopen Resolved threads if needed.</li> </ul> </li> </ol> <p>Tip</p> <p>Use diff settings to speed up review:   </p> <ul> <li>Hide whitespace changes (A very useful setting for ignoring formatting changes)   </li> <li>Expand context (Show more lines)</li> <li>Toggle rich diff for binaries like images/Markdown</li> <li>Mark files as Viewed to track progress (Useful when you are working on multiple files)</li> </ul>"},{"location":"02-Working-With-PR/05-PR-Track-Review/#3-update-the-pr-with-fixes","title":"3. Update the PR with Fixes","text":"<ol> <li>Make your tweaks on the same branch (e.g., <code>git-labs-branch</code>).</li> <li>Commit and push, the PR updates itself and you\u2019ll see a refresh banner.</li> <li>If you see a <code>Refresh</code> button, click it to update the PR view.</li> </ol>"},{"location":"02-Working-With-PR/06-PR-Template/","title":"Creating and Using Pull Request Templates","text":"<ul> <li>This lab shows how to create and use PR templates to standardize pull request descriptions and ensure consistent information across your team.</li> </ul>"},{"location":"02-Working-With-PR/06-PR-Template/#1-understanding-pr-templates","title":"1. Understanding PR Templates","text":"<ul> <li>PR templates automatically populate the description field when someone creates a new pull request. </li> <li>They help us with the following:<ul> <li>Maintain consistent information across all PRs</li> <li>Ensure required details aren\u2019t missed</li> <li>Facilitate faster code reviews with better context</li> <li>Provide clear linking between PRs and issues</li> </ul> </li> </ul>"},{"location":"02-Working-With-PR/06-PR-Template/#2-create-the-template-file","title":"2. Create the Template File","text":"<ol> <li>Create a new branch (So you can work on the template without affecting the main branch).</li> <li>In your repository root, create a <code>.github</code> folder if it doesn\u2019t exist.</li> <li>Inside <code>.github</code>, create a file named <code>pull_request_template.md</code>.</li> <li>Add your template content using markdown syntax.</li> </ol> <p>The file structure should look like:</p> <pre><code>your-repo/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 pull_request_template.md\n</code></pre>"},{"location":"02-Working-With-PR/06-PR-Template/#3-template-content","title":"3. Template Content","text":"<p>Here\u2019s a comprehensive template that covers most use cases:</p> <pre><code>## Description\n&lt;!-- Briefly describe the changes introduced by this PR --&gt;\n\n## Related Issue\n&lt;!-- Link the issue this PR closes or relates to , if any--&gt;\nFixes #&lt;issue_number&gt;\n\n## Type of Change\n&lt;!-- Leave only the relevant one and delete the others --&gt;\n- [ ] Bug fix \ud83d\udc1b\n- [ ] New feature \u2728\n- [ ] Documentation update \ud83d\udcda\n- [ ] Enhancement \ud83d\udee0\ufe0f\n- [ ] Refactoring \u267b\ufe0f\n- [ ] Hotfix \ud83d\udd25\n- [ ] Other (please describe):\n\n## Checklist\n- [ ] I have tested my changes locally\n- [ ] I have updated documentation if needed\n- [ ] My code follows the project's style guidelines\n- [ ] I have linked the related issue\n- [ ] I need to go home \ud83d\ude0a\n\n## Screenshots (if applicable)\n&lt;!-- Add before/after screenshots for UI changes --&gt;\n\n## Additional Notes\n&lt;!-- Anything else reviewers should know --&gt;\n</code></pre>"},{"location":"02-Working-With-PR/06-PR-Template/#4-create-the-template-file-in-your-repo","title":"4. Create the Template File in Your Repo","text":"<p>Creating the Template File</p> <p>Make sure you create the template file in the correct location.(<code>.github</code> folder) or else it will not work.</p> <ol> <li>Switch to the <code>main</code> branch.</li> <li>Switch to your repository root folder.</li> <li>Create new file with the specific name <code>.github/pull_request_template.md</code></li> <li>Copy the template content from above into the file.</li> <li>Commit and push the changes</li> </ol>"},{"location":"02-Working-With-PR/06-PR-Template/#5-using-the-template","title":"5. Using the Template","text":"<ol> <li>Make changes, add, commit &amp; push your code.</li> <li>Create a new pull request as usual.</li> <li>The template will automatically appear in the description field.</li> </ol>"},{"location":"02-Working-With-PR/06-PR-Template/#6-multiple-templates","title":"6. Multiple Templates","text":"<p>You can create different templates for different types of PRs:</p> <pre><code>.github/\n\u251c\u2500\u2500 PULL_REQUEST_TEMPLATE/\n\u2502   \u251c\u2500\u2500 bug_fix.md\n\u2502   \u251c\u2500\u2500 feature.md\n\u2502   \u2514\u2500\u2500 documentation.md\n\u2514\u2500\u2500 pull_request_template.md (default)\n</code></pre> <ol> <li>Create a new file for each template in the <code>.github/PULL_REQUEST_TEMPLATE/</code> directory.</li> <li>Write your template content using markdown syntax.</li> <li>You can set a template name and description:   <pre><code>name: Bug Fix\ndescription: Use this template for bug fixes\n</code></pre></li> <li> <p>Add, commit, and push your changes.</p> <p></p> </li> </ol> <p>ISSUE_TEMPLATE</p> <ul> <li>GitHub support Issue Template as well.</li> <li>Same concept but in different folder.</li> <li><code>.github/ISSUE_TEMPLATE/</code></li> </ul>"},{"location":"02-Working-With-PR/06-PR-Template/#7-using-pr-template","title":"7. Using PR template","text":"<p>Default Template</p> <p>In order to use the default PR template, simply create a new pull request as you normally would.</p> <p>Custom Template</p> <p>In order to use a custom PR template, you can specify the template in the URL when creating the PR.</p> <p><pre><code>###\n### https://github.com/owner/repo/compare/&lt;branch to&gt;...&lt;branch_from&gt;?template=&lt;template&gt;\n\nhttps://github.com/owner/repo/compare/main...feature?template=feature.md\n</code></pre> Using query parameters to create a pull request</p>"},{"location":"02-Working-With-PR/06-PR-Template/#8-testing-your-template","title":"8. Testing Your Template","text":"<ol> <li>Create a test branch:</li> </ol> <pre><code>git checkout -b test-pr-template\ngit push origin test-pr-template\n</code></pre> <ol> <li>Open a new PR from this branch to see the template in action.</li> <li>Verify all sections appear correctly and make adjustments if needed.</li> </ol>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/","title":"Implementing CODEOWNERS for Pull Request Automation","text":"<p>\ud83e\udde9 This hands-on lab walks you through adding a <code>CODEOWNERS</code> file to automatically assign reviewers and enforce ownership rules on pull requests.</p>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#1-using-codeowners","title":"1. Using CODEOWNERS","text":"<ul> <li><code>CODEOWNERS</code> is a file that allows you to define individuals or teams responsible for specific parts of your codebase. </li> <li>When changes are made to those areas, the designated code owners are automatically requested for review.</li> <li>This helps ensure that the right people are reviewing changes to critical parts of the code.</li> <li><code>CODEOWNERS</code> can also be used to enforce review policies, such as requiring approval from code owners before merging.</li> </ul> <p>How CODEOWNERS Works</p> <ul> <li>Automatically assigns reviewers based on file changes</li> <li>Ensures domain experts review relevant code</li> <li>Can be combined with branch protection rules</li> <li>Supports teams and individual users</li> </ul> <ul> <li> <p>Create <code>.github/CODEOWNERS</code> in your repository:</p> <pre><code># Global owners\n* @username @team-name\n\n# Frontend code\n/src/components/ @frontend-team\n/src/styles/ @design-team\n\n# Backend code\n/api/ @backend-team\n/database/ @backend-team @database-admin\n\n# Infrastructure\n/.github/ @devops-team\n/docker/ @devops-team\n</code></pre> </li> </ul>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#2-codeowners-files-location","title":"2. CODEOWNERS - Files location","text":"<p>GitHub search for the first matching file in following order:</p> <ol> <li><code>.github/CODEOWNERS</code></li> <li><code>CODEOWNERS</code> in the repository root</li> <li><code>docs/CODEOWNERS</code></li> </ol> <p>Tip</p> <p>Recommended: Use <code>.github/CODEOWNERS</code> for consistency with other meta files (workflows, templates).</p>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#3-codeowners-pattern","title":"3. CODEOWNERS - Pattern","text":"Pattern Type Example Matches Single file <code>README.md</code> Exact file Directory (recursive) <code>src/</code> Everything under <code>src/</code> Specific extension <code>*.md</code> All Markdown files Nested path <code>app/api/</code> Files in that folder &amp; subfolders Escaping <code>#</code> <code>\\#file.txt</code> File literally named <code>#file.txt</code> Comment line <code># owners of infra</code> Ignored Last match wins Later entries override Use ordering intentionally"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#4-codeowners-example","title":"4. CODEOWNERS - Example","text":"<ul> <li> <p>Create directory (if needed):</p> <pre><code>mkdir -p .github\n</code></pre> </li> <li> <p>Add file <code>.github/CODEOWNERS</code>:</p> <pre><code># Global ownership (fallback)\n* nirgeier@gmail.com\n\n# Documentation\n/docs/ @your-org/docs-writers\n*.md   @your-org/docs-writers\n\n# Frontend code\n/src/components/ @your-org/frontend-team\n/src/styles/ @your-org/design-team\n\n###\n###... Any other paths or file types\n###\n</code></pre> </li> <li> <p>Add to git &amp; push:</p> <pre><code>git add .github/CODEOWNERS\ngit commit -m \"Add initial CODEOWNERS file\"\ngit push origin main\n</code></pre> </li> </ul>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#5-codeowners-enable","title":"5. CODEOWNERS - Enable","text":"<p>If you have not enabled branch protection yet:</p> <ol> <li>Go to: Repository \u2192 Settings \u2192 Rules \u2192 Rulesets (or Branches &gt; Branch protection)</li> <li>Create / Edit your ruleset targeting <code>main</code></li> <li>Enable the following<ul> <li>Require a pull request before merging</li> <li>Require approvals: set to <code>1</code> (or more)</li> <li>Require review from Code Owners </li> <li>Dismiss stale approvals (recommended)</li> <li>Require conversation resolution</li> </ul> </li> <li>Save / Activate the ruleset</li> </ol> <p></p>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#6-codeowners-verify-test","title":"6. CODEOWNERS - Verify (Test)","text":"<ul> <li>Open a pull request</li> <li>In the PR sidebar you should see:</li> <li>Reviewers automatically populated with teams/users from matching patterns.</li> </ul>"},{"location":"02-Working-With-PR/07-PR-CODEOWNERS/#7-codeowners-checklist","title":"7. CODEOWNERS - Checklist","text":"<p>Use this checklist to validate success:</p> <ul> <li> CODEOWNERS exists at <code>.github/CODEOWNERS</code></li> <li> Global <code>*</code> rule defined</li> <li> At least one team + one individual user referenced (optional)</li> <li> Branch protection requires Code Owner review</li> <li> Test PR auto-assigned reviewers</li> <li> Specific path override tested</li> </ul>"},{"location":"03-Configuration/","title":"Lab 03: Configuration","text":"<p>\u2003\u2003\u2699\ufe0f\u2003This lab guides you through core repository configuration that scales collaboration and governance. \u2003\u2003\u2699\ufe0f\u2003You will set up template repositories, branch / ruleset policies, security &amp; automation (Code / Secret / Dependency scanning), and collaboration standards.</p>"},{"location":"03-Configuration/#lab-contents","title":"Lab Contents","text":"<p> Template Repository Rulesets Security Scanning Collaboration (WIP)</p>"},{"location":"03-Configuration/#summary","title":"Summary","text":"<p>By completing this lab you will be able to:</p> <p>\u2003\u2003\u2705\u2003Publish and consume repository templates for fast, consistent project starts \u2003\u2003\u2705\u2003Design and enforce branch &amp; ruleset policies tailored to branch purpose \u2003\u2003\u2705\u2003Automate security posture (CodeQL, Secrets, Dependency Review) with gated merges \u2003\u2003\u2705\u2003Integrate scanning outputs into PR workflows &amp; branch protection \u2003\u2003\u2705\u2003Lay groundwork for scalable collaboration (governance &amp; ownership)  </p>"},{"location":"03-Configuration/01-Template-Repository/","title":"Creating a Template Repository","text":"<ul> <li>This lab shows how to create and use GitHub template repositories for new repositories.</li> <li>This lab will not cover all the possible configurations and customizations for template repositories.</li> </ul>"},{"location":"03-Configuration/01-Template-Repository/#1-template-repositories-why","title":"1. Template Repositories. Why?","text":"<p>Template Benefits</p> <ul> <li>Template repositories are special GitHub repositories that serve as blueprints (bootstraps) for creating new repositories. </li> <li> <p>Some of the templates include:</p> <ul> <li>Consistent project structure across teams and organizations</li> <li>Pre-configured settings like CI/CD pipelines, linting rules, and development tools</li> <li>Boilerplate code and documentation templates</li> <li>Faster project initialization without manual setup</li> <li>Best practices and guidelines for project setup</li> <li>Customizable workflows to fit specific project needs</li> <li>Integration with third-party tools and services</li> <li>Automated setup scripts for quick environment configuration</li> <li>Sample data and fixtures to help kickstart development</li> <li>Documentation and tutorials for using the template effectively</li> <li>Issue and pull request templates for consistent contributions</li> <li>Custom scripts for common tasks (e.g., setup, testing)</li> <li>Environment configuration files (e.g., <code>.env.example</code>)</li> </ul> <p>When someone creates a new repository from a template, they get a clean copy with all the template\u2019s files but none of its Git history.</p> </li> </ul>"},{"location":"03-Configuration/01-Template-Repository/#2-prepare-your-template-repository","title":"2. Prepare Your Template Repository","text":"<p>Lets create a new repository on GitHub to serve as our template.</p> <ol> <li>Go to GitHub.com and sign in to your account.</li> <li>Click the \u201d+\u201d icon in the top-right corner and select \u201cNew repository\u201d.</li> <li>Choose a descriptive name like <code>my-project-template</code> or <code>react-app-template</code>.</li> <li>Add a clear description explaining what the template is for.</li> <li>Make the repository Public (templates work best when accessible).</li> <li>Initialize with a README file.</li> <li>Click \u201cCreate repository\u201d.</li> </ol> <p>New Repository</p> <p></p> <p>Template Repository</p> <p></p>"},{"location":"03-Configuration/01-Template-Repository/#3-create-repository-template-files","title":"3. Create Repository Template Files","text":"<ul> <li> <p>A basic template project should look like:</p> <pre><code>root /                                         # Repository root\n\u251c\u2500\u2500 .github /                                  # GitHub-specific configuration\n\u2502   \u251c\u2500\u2500 workflows /                            # GitHub Actions workflow definitions\n\u2502   \u2502   \u2514\u2500\u2500 ci.yml                             # CI pipeline (build/test/lint)\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/                        # Issue form/templates\n\u2502   \u2502   \u251c\u2500\u2500 bug_report.md                      # Bug report issue template\n\u2502   \u2502   \u2514\u2500\u2500 feature_request.md                 # Feature request issue template\n\u2502   \u2514\u2500\u2500 pull_request_template.md               # PR description guidance\n\u251c\u2500\u2500 docs/                                      # Project documentation\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md                        # How to contribute (standards, process)\n\u2502   \u2514\u2500\u2500 SETUP.md                               # Local environment / install steps\n\u251c\u2500\u2500 src/                                       # Application/source code\n\u2502   \u2514\u2500\u2500 (your project files)                   # Replace with actual modules/packages\n\u251c\u2500\u2500 tests/                                     # Test suite root\n\u2502   \u2514\u2500\u2500 (test files)                           # Unit/integration/e2e tests\n\u251c\u2500\u2500 .gitignore                                 # Ignore rules for Git\n\u251c\u2500\u2500 LICENSE                                    # Project license (e.g., MIT, Apache-2.0)\n\u251c\u2500\u2500 README.md                                  # Overview, usage, badges, quick start\n\u2514\u2500\u2500 package.json (or equivalent)               # Dependency &amp; script manifest (npm, etc.)\n</code></pre> </li> <li> <p>Create any content you want to include in the template repository</p> </li> <li>Add and commit your changes</li> </ul>"},{"location":"03-Configuration/01-Template-Repository/#4-enable-template-mode","title":"4. Enable Template Mode","text":"<p>Note</p> <p>In order to use this repository as a template, you need to enable template mode.</p> <p></p> <ol> <li>Navigate to your repository on GitHub.</li> <li>Click the \u201cSettings\u201d tab (top navigation bar).</li> <li>Scroll down to the \u201cGeneral\u201d section.</li> <li>Find the \u201cTemplate repository\u201d checkbox.</li> <li>Check the box to \u201cTemplate repository\u201d.</li> <li>Click \u201cSave\u201d to confirm the changes.</li> </ol>"},{"location":"03-Configuration/01-Template-Repository/#5-use-the-template-repository","title":"5. Use the Template Repository","text":"<ol> <li>Log into GitHub.</li> <li>Navigate to your template repository.</li> <li>Click the green \u201cUse this template\u201d button (appears instead of \u201cClone\u201d).</li> <li>Select \u201cCreate a new repository\u201d.</li> <li>Fill in the new repository details:<ul> <li>Repository name: Choose a descriptive name</li> <li>Description: Describe the specific project</li> <li>Visibility: Public or Private as needed</li> </ul> </li> <li>Choose whether to \u201cInclude all branches\u201d (usually keep unchecked).</li> <li>Click \u201cCreate repository from template\u201d.</li> <li>Your new repository will be created with all files and settings from the template.</li> </ol>"},{"location":"03-Configuration/02-RulesSet/","title":"GitHub Rulesets","text":"<ul> <li>Rulesets are the modern way to enforce protections on branches across a repository (or organization). </li> <li>Use a branch ruleset to standardize requirements like PR reviews, status checks, commit signing, and more.</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#understanding-ruleset-branch-protection","title":"Understanding Ruleset / Branch Protection","text":"<p>Branch protection rules help maintain code quality by:</p> <ul> <li>Preventing direct pushes to important branches like <code>main</code> or <code>develop</code></li> <li>Requiring pull request reviews before merging code</li> <li>Enforcing status checks from CI/CD pipelines</li> <li>Restricting who can push to protected branches</li> <li>Maintaining a clean commit history with merge strategies</li> <li>Ensuring code review processes by forcing pull request reviews</li> <li>Enabling automated testing to catch issues early</li> <li>Maintaining a clean commit history with merge strategies</li> <li>Enforcing coding standards through automated checks</li> <li>Preventing accidental deletions of important branches</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#1-create-ruleset","title":"1. Create Ruleset","text":"<ol> <li>Open the repository on GitHub and go to Settings</li> <li>In the sidebar, select Rules \u2192 Rulesets</li> <li>Click New ruleset and choose New Branch Ruleset as the target</li> <li>Give the ruleset a meaningful name (for example, <code>Branch Protections - main</code>)</li> <li>Set Enforcement status \u2192 Active / Disabled </li> <li>Set Target branches \u2192 Add target (which branches the rules apply to):</li> <li>Configure Bypass list (optional):<ul> <li>Add specific users/teams that may bypass, and (if required)</li> </ul> </li> </ol> <p>Danger</p> <p>Bypass rules should be used sparingly and only for trusted users or teams. <code>Atera</code> Does have bypass rules </p> <p></p>"},{"location":"03-Configuration/02-RulesSet/#2-approvals","title":"2. Approvals","text":"<ul> <li>Set the Require a pull request before merging \u2192 Required Approvals </li> </ul>"},{"location":"03-Configuration/02-RulesSet/#3-merge-methods","title":"3. Merge Methods","text":"<ul> <li> <p>Set the Allowed merge methods </p> </li> </ul>"},{"location":"03-Configuration/02-RulesSet/#squash","title":"Squash","text":"<ul> <li>Recommended for most teams</li> <li>Combines all commits into a single commit</li> <li>Keeps main branch history clean</li> <li>Easy to revert changes</li> <li>Provides a clear commit history</li> <li>Allows for better collaboration and code review</li> <li>Simplifies the process of reverting changes</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#rebase","title":"Rebase","text":"<ul> <li>Replays commits without creating merge commits</li> <li>Creates linear history</li> <li>Good for small, clean changes</li> <li>Allows for easier bisecting of changes</li> <li>Supports interactive rebasing</li> <li>Requires careful management of commit history</li> <li>Not recommended for large feature branches</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#merge-committing","title":"Merge committing","text":"<ul> <li>Creates merge commits that preserve branch history</li> <li>Good for feature branch workflows</li> <li>Allows for more complex merge scenarios</li> <li>Requires careful management of merge conflicts</li> <li>Not recommended for small changes</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#merge-strategy-recommendations","title":"Merge Strategy Recommendations","text":"Workflow Type Recommended Strategy Benefits Feature branches Squash merge Clean main branch history Hotfixes Rebase merge Fast-forward integration Release branches Merge commit Preserve branch context Small changes Squash merge Reduce commit noise"},{"location":"03-Configuration/02-RulesSet/#4-status-checks","title":"4. Status Checks","text":"<ul> <li>Set the Require status checks to pass \u2192 Require status checks to pass before merging </li> <li>Add the required checks </li> </ul> <p>Require status checks to pass before merging</p> <ul> <li>This ensures that all required checks pass before merging a pull request.</li> <li>It helps maintain code quality and prevents broken code from being merged.</li> <li>You can select specific checks like:<ul> <li><code>ci/build</code></li> <li><code>ci/test</code></li> <li><code>security/code-scanning</code></li> <li><code>quality/lint</code></li> <li><code>Atera/specific_task</code> </li> </ul> </li> </ul>"},{"location":"03-Configuration/02-RulesSet/#5-branch-restrictions","title":"5. Branch Restrictions","text":"<ul> <li>Those are several restrictions you can apply to branches</li> <li>Review the rules screen and you can see all the different configured restrictions</li> </ul>"},{"location":"03-Configuration/02-RulesSet/#task-create-rules-for-development-branch","title":"Task: Create rules for Development Branch","text":"<p> Pattern: <code>develop</code> or <code>dev</code> Required reviewers: 1  Status checks: CI tests only Allow force pushes: No  </p>"},{"location":"03-Configuration/02-RulesSet/#task-create-rules-for-release-branches","title":"Task: Create rules for Release Branches","text":"<p> Pattern: <code>release/*</code> Required reviewers: 2 Status checks: Full test suite Restrict pushes: Release managers only  </p>"},{"location":"03-Configuration/02-RulesSet/#task-create-rules-for-feature-branches","title":"Task: Create rules for Feature Branches","text":"<p> Pattern: <code>feature/*</code> Required reviewers: 1 Status checks: Basic CI Allow force pushes: Yes (for development)  </p>"},{"location":"03-Configuration/02-RulesSet/#6-copilot-code-reviews","title":"6. Copilot Code Reviews","text":"<ul> <li>Set the Require a pull request before merging \u2192 Automatically request Copilot code review</li> </ul>"},{"location":"03-Configuration/03-CodeScan/","title":"Code Scann","text":"<ul> <li>This lab walks through configuring GitHub\u2019s core application security features.</li> <li>You will enable and tune: Code Scanning (CodeQL), Secret Scanning (incl. Push Protection), and Dependency Review.</li> <li>Includes setup, workflow authoring, alert triage, automation, and integration with branch protection.</li> </ul>"},{"location":"03-Configuration/03-CodeScan/#1-why-these-security-features-matter","title":"1. Why These Security Features Matter","text":"<p>Security features help you shift-left by:</p> <ul> <li>Automatically finding vulnerabilities (CodeQL semantic analysis)</li> <li>Preventing leaked credentials before they land in <code>main</code> (Secret Scanning + Push Protection)</li> <li>Catching risky dependency changes during code review (Dependency Review)</li> <li>Reducing mean-time-to-detect (MTTD) with continuous scanning</li> <li>Standardizing security gates via required status checks</li> <li>Enabling measurable SLAs for remediation (alerts, severity, timelines)</li> <li>Supporting audit &amp; compliance with immutable alert history</li> </ul>"},{"location":"03-Configuration/03-CodeScan/#2-prerequisites","title":"2. Prerequisites","text":"Area Requirement Permissions Repository Admin (to enable security &amp; analysis) Repo Visibility All features free for public repos. Private repos need GHAS for CodeQL &amp; Secret Scanning. Branch Strategy Protected default branch (e.g. <code>main</code>) Code Languages CodeQL supports Java, Kotlin, C/C++, Go, C#, Python, Ruby, JS/TS, Swift, etc. CI CodeQL workflows consume Actions minutes <p>Note</p> <p>If a language is not auto-detected specify explicitly (<code>languages: ['java','python']</code>).</p>"},{"location":"03-Configuration/03-CodeScan/#3-enable-security-analysis-features","title":"3. Enable Security &amp; Analysis Features","text":"<ol> <li>Navigate to the repository on GitHub.</li> <li>Settings \u2192 Advanced Security \u2192 Code scanning.</li> <li>Enable what ever you wish based upon your needs:<ul> <li> Dependency graph</li> <li> Dependabot alerts</li> <li> Dependabot security updates (optional)</li> <li> Code scanning (Default or Advanced)</li> <li> Secret scanning</li> <li> Secret scanning: Push protection</li> </ul> </li> <li>Wait for activation banners.</li> </ol> <p>Note</p> <p>Dependency Graph must be on for Dependency Review context.</p> <p></p>"},{"location":"03-Configuration/03-CodeScan/#4-code-scanning-codeql","title":"4. Code Scanning (CodeQL)","text":""},{"location":"03-Configuration/03-CodeScan/#41-modes","title":"4.1 Modes","text":"Mode Use Case Effort Default Fast enable, standard query packs Very Low Advanced (workflow) Custom build, multi-language, custom packs Medium SARIF Upload Integrate external SAST tools Variable"},{"location":"03-Configuration/03-CodeScan/#42-quick-start-default","title":"4.2 Quick Start (Default)","text":"<ol> <li>Security tab \u2192 Code scanning alerts.</li> <li>Set up code scanning \u2192 Default \u2192 Enable CodeQL.</li> <li>Initial analysis runs automatically.</li> <li>Review alerts when finished.</li> </ol>"},{"location":"03-Configuration/03-CodeScan/#43-advanced-workflow","title":"4.3 Advanced Workflow","text":"<p>Create <code>.github/workflows/codeql.yml</code>:</p> <pre><code>name: CodeQL\n\non:\n    push:\n        branches: [\"main\"]\n    pull_request:\n        branches: [\"main\"]\n    schedule:\n        - cron: '0 3 * * 1'\n\njobs:\n    analyze:\n        runs-on: ubuntu-latest\n        permissions:\n            actions: read\n            contents: read\n            security-events: write\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [javascript, python]\n        steps:\n            - uses: actions/checkout@v4\n            - name: Initialize CodeQL\n                uses: github/codeql-action/init@v3\n                with:\n                    languages: ${{ matrix.language }}\n                    # packs: codeql/javascript-queries@latest,codeql/python-queries@latest\n                    # config-file: ./.github/codeql/codeql-config.yml\n            - name: Autobuild\n                uses: github/codeql-action/autobuild@v3\n            - name: Analyze\n                uses: github/codeql-action/analyze@v3\n                with:\n                    category: \"/language:${{ matrix.language }}\"\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#44-custom-queries","title":"4.4 Custom Queries","text":"<p>Create <code>.github/codeql/codeql-config.yml</code>:</p> <p><pre><code>name: Custom CodeQL Config\nqueries:\n    - uses: security-extended\n    - uses: security-and-quality\n</code></pre> Reference with <code>config-file</code> in init step.</p> <p>Tip</p> <pre><code>Add `security-extended` after validating baseline noise.\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#45-manual-build-example","title":"4.5 Manual Build Example","text":"<pre><code>            - name: Build (Maven)\n                run: mvn -B -DskipTests package\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#46-triage-alerts","title":"4.6 Triage Alerts","text":"<ol> <li>Security \u2192 Code scanning alerts.</li> <li>Filter by severity / language.</li> <li>Open alert \u2192 inspect data flow.</li> <li>Fix or Dismiss (False positive, Won\u2019t fix, Used in tests, Acceptable risk).</li> <li>Link fix via PR.</li> </ol>"},{"location":"03-Configuration/03-CodeScan/#47-suppress-in-code-last-resort","title":"4.7 Suppress in Code (last resort)","text":"<pre><code>// codeql[js/incomplete-sanitization] Reason: validated upstream\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#48-enforce-via-branch-protection","title":"4.8 Enforce via Branch Protection","text":"<p>Add CodeQL checks as required status checks after first successful run.</p>"},{"location":"03-Configuration/03-CodeScan/#5-secret-scanning","title":"5. Secret Scanning","text":""},{"location":"03-Configuration/03-CodeScan/#51-push-protection-flow","title":"5.1 Push Protection Flow","text":"<ol> <li>Developer pushes commit with secret.</li> <li>GitHub blocks push; shows remediation.</li> <li>Developer removes secret (preferred) or bypasses with justification (audited).</li> </ol>"},{"location":"03-Configuration/03-CodeScan/#52-custom-patterns-ghas","title":"5.2 Custom Patterns (GHAS)","text":"<p>Security \u2192 Secret scanning \u2192 Custom patterns \u2192 New pattern. Example regex: <code>INT-API-[0-9A-F]{32}</code></p> <p>Warning</p> <pre><code>Keep patterns specific to avoid false positives.\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#53-triage","title":"5.3 Triage","text":"<p>For each alert: verify exposure, revoke/rotate, optionally rewrite history, resolve with reason.</p>"},{"location":"03-Configuration/03-CodeScan/#54-sla-guidance","title":"5.4 SLA Guidance","text":"Severity Example SLA High Cloud root keys 4 hours Medium Internal API tokens 1 business day Low Test credentials 3 days"},{"location":"03-Configuration/03-CodeScan/#6-dependency-review","title":"6. Dependency Review","text":""},{"location":"03-Configuration/03-CodeScan/#61-use","title":"6.1 Use","text":"<p>Shows added/removed/updated dependencies, vulnerabilities, licenses in PR.</p>"},{"location":"03-Configuration/03-CodeScan/#62-workflow-optional-gate","title":"6.2 Workflow (optional gate)","text":"<p><code>.github/workflows/dependency-review.yml</code>:</p> <pre><code>name: Dependency Review\non: [pull_request]\npermissions:\n    contents: read\n    pull-requests: read\njobs:\n    review:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v4\n            - uses: actions/dependency-review-action@v4\n                with:\n                    fail-on-severity: high\n                    # allow-licenses: MIT,Apache-2.0\n                    # deny-licenses: GPL-3.0\n                    # comment-summary-in-pr: true\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#63-dependabot-updates","title":"6.3 Dependabot Updates","text":"<p><code>.github/dependabot.yml</code>:</p> <pre><code>version: 2\nupdates:\n    - package-ecosystem: npm\n        directory: /\n        schedule:\n            interval: weekly\n        open-pull-requests-limit: 5\n    - package-ecosystem: pip\n        directory: /\n        schedule:\n            interval: weekly\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#7-branch-protection-integration","title":"7. Branch Protection Integration","text":"Feature Check Name Example Action CodeQL CodeQL / Analyze (javascript) Require Dependency Review Dependency Review / review Require Secret Scanning (none) Rely on push protection <p>Add checks under Branch protection \u2192 Require status checks.</p>"},{"location":"03-Configuration/03-CodeScan/#8-alert-review-workflow","title":"8. Alert Review Workflow","text":"Step Action Owner Detect Scan creates alert Automation Triage Validate severity Security Champion Assign Link issue/PR Eng Lead Remediate Patch / rotate Developer Verify Confirm closure Security Report Metrics &amp; trends Security Ops <p>Tip</p> <pre><code>Tag security when dismissing or suppressing findings.\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#9-advanced-topics","title":"9. Advanced Topics","text":""},{"location":"03-Configuration/03-CodeScan/#91-sarif-upload-3rd-party","title":"9.1 SARIF Upload (3rd Party)","text":"<pre><code>            - name: Upload SARIF\n                uses: github/codeql-action/upload-sarif@v3\n                with:\n                    sarif_file: results.sarif\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#92-secret-pattern-anchoring","title":"9.2 Secret Pattern Anchoring","text":"<p><code>\\bAKIA[0-9A-Z]{16}\\b</code></p>"},{"location":"03-Configuration/03-CodeScan/#93-noise-reduction","title":"9.3 Noise Reduction","text":"<ul> <li>Start with default packs only.</li> <li>Audit dismissals; convert recurring false positives into custom query tweaks.</li> <li>Incrementally tighten severity gates.</li> </ul>"},{"location":"03-Configuration/03-CodeScan/#94-license-policy","title":"9.4 License Policy","text":"<p>Use dependency review action <code>allow-licenses</code> / <code>deny-licenses</code> to enforce governance.</p>"},{"location":"03-Configuration/03-CodeScan/#10-metrics","title":"10. Metrics","text":"Metric Target CodeQL MTTR &lt; 14 days Secret Exposure Window &lt; 1 hour high severity Vulnerable Dependency Introduction 0% High severity False Positive Rate &lt; 10%"},{"location":"03-Configuration/03-CodeScan/#11-troubleshooting","title":"11. Troubleshooting","text":"Issue Cause Fix No CodeQL alerts Wrong language / no runs Verify workflow triggers &amp; languages Missing status check Name mismatch Copy exact check name post-run Push not blocked Pattern gap / bypass Add custom pattern, review bypass logs Slow CodeQL job Large build Cache deps / split languages Dependency Review missing Dependency graph off Enable in settings <p>Note</p> <pre><code>Some alerts appear only after first successful default branch scan.\n</code></pre>"},{"location":"03-Configuration/03-CodeScan/#12-next-steps","title":"12. Next Steps","text":"<ol> <li>Promote workflow &amp; config to template repo.</li> <li>Add CODEOWNERS for <code>.github/workflows/**</code>.</li> <li>Export alerts weekly (governance dashboard).</li> <li>Add security KPIs to sprint review.</li> </ol> <p>By completing this lab you established a proactive security baseline using native GitHub: CodeQL, Secret Scanning, and Dependency-aware reviews. Iterate on queries, secret patterns, and gating policies as the codebase evolves.</p>"},{"location":"03-Configuration/04-Collaboration/","title":"4. Collaboration","text":""}]}