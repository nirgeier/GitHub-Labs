{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Labs: List of Tasks","text":""},{"location":"#000-setup","title":"000-Setup","text":"<ul> <li>Task 1: Install Tools</li> <li>Task 2: Setup GitHub</li> </ul>"},{"location":"#001-working-with-repo","title":"001-Working-With-Repo","text":"<ul> <li>1a. Creating a Repository (MCP)</li> <li>1b. Creating a Repository (WEB)</li> <li>1c. Creating a Repository (gh)</li> <li>2. Cloning a Repository</li> <li>3. Making Changes</li> <li>4. Committing Changes</li> <li>5. Pushing Changes</li> </ul>"},{"location":"#002-working-with-pr","title":"002-Working-With-PR","text":"<ul> <li>1. Creating Local Branch</li> <li>2. Opening Pull Requests</li> <li>2a. Opening PR (GitHub Web)</li> <li>2b. Opening PR (GitHub CLI)</li> <li>2c. Opening PR (GitHub MCP)</li> <li>3. Working With PR Reviews</li> </ul>"},{"location":"000-Setup/","title":"Lab 000: Setup","text":"<ul> <li>Welcome to Lab 000: Setup! </li> <li>This lab will guide you through the essential steps to prepare your environment for working with Git and GitHub. </li> <li>By the end of this lab, you will have all the necessary tools installed and your GitHub account fully configured for secure and efficient collaboration.</li> </ul>"},{"location":"000-Setup/#lab-contents","title":"Lab Contents","text":""},{"location":"000-Setup/#01-install-toolsmd","title":"01-Install-Tools.md:","text":"<ul> <li>Learn how to install Git on macOS, Windows, or Linux.</li> <li>Optionally install the GitHub CLI (<code>gh</code>) for advanced GitHub interactions from your terminal.</li> <li>Configure your Git identity (name and email) for commit attribution.</li> </ul>"},{"location":"000-Setup/#02-setup-githubmd","title":"02-Setup-GitHub.md:","text":"<ul> <li>Step-by-step instructions to create and verify your GitHub account.</li> <li>Personalize your GitHub profile.</li> <li>Generate and add SSH keys for secure authentication.</li> <li>Add your SSH key to GitHub and test your connection.</li> </ul>"},{"location":"000-Setup/#quick-links","title":"Quick Links","text":"<ul> <li>Install Tools</li> <li>Setup GitHub</li> </ul>"},{"location":"000-Setup/#summary","title":"Summary","text":"<p>This lab ensures you are ready to use Git and GitHub by:</p> <ul> <li>Installing required tools (Git, GitHub CLI)</li> <li>Setting up your Git identity</li> <li>Creating and configuring your GitHub account</li> <li>Setting up SSH keys for secure, passwordless authentication</li> </ul> <p>After completing this lab, you will be prepared to start working with repositories, collaborating with others, and using GitHub efficiently and securely.</p>"},{"location":"000-Setup/01-Install-Tools/","title":"Installing Tools","text":"<p>About this Guide</p> <p>This guide will walk you through installing git, creating a GitHub account and configuring it for the first time.</p>"},{"location":"000-Setup/01-Install-Tools/#1-installing-git","title":"1. Installing Git","text":"<ul> <li>First, you need to install Git locally.</li> </ul> <p> Installing Git</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># (Requires [Homebrew](https://brew.sh/))\nbrew install git\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install git\n</code></pre></p>"},{"location":"000-Setup/01-Install-Tools/#2-installing-gh","title":"2. Installing <code>gh</code>","text":"<ul> <li>To work with GitHub from your computer, you can use the optional GitHub CLI (<code>gh</code>) tool to interact with GitHub directly from your terminal.</li> </ul> <p> Installing GitHub CLI</p>  macOS Windows Linux <p>Open Terminal and run: <pre><code># (Requires [Homebrew](https://brew.sh/))\nbrew install gh\n</code></pre></p> <p>Download and install from git-scm.com.</p> <p>Use your package manager, for example: <pre><code>sudo apt install gh\n</code></pre></p>"},{"location":"000-Setup/01-Install-Tools/#3-set-up-your-git-identity","title":"3. Set Up Your Git Identity","text":"<ul> <li>In order to use Git and GitHub effectively, you need to configure your Git identity.</li> <li>Your Git identity is defined by your name and email address, which will be associated with your commits.</li> <li> <p>Open your terminal and run the following commands to set your global Git configuration:    <pre><code># Configure Git with your user information\n# Replace with the name and email you used for GitHub.\ngit config --global user.name \"&lt;Your Name&gt;\"\ngit config --global user.email \"&lt;your-email@example.com&gt;\"\n</code></pre></p> <pre><code># Example:\ngit config --global user.name \"Nir Geier\"\ngit config --global user.email \"nir.geier@gmail.com\"\n</code></pre> </li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/","title":"Setup GitHub","text":"<p>About this Guide</p> <p>This guide will walk you through setting up your GitHub account and configuring it for the first time.</p>"},{"location":"000-Setup/02-Setup-GitHub/#1-create-github-account","title":"1. Create GitHub Account","text":"<ol> <li>Go to https://github.com/.</li> <li>Click Sign up in the top-right corner.</li> <li>Enter your email address and click Continue.</li> <li>Create a strong password and click Continue.</li> <li>Choose a username (this will be your public identity on GitHub).</li> <li>Follow the prompts to verify your account (you may need to solve a puzzle or enter a code sent to your email).</li> <li>Choose your plan (the free plan is sufficient for most users).</li> <li>Complete the setup by answering a few questions (optional) and click Complete setup.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#2-verify-your-email-address","title":"2. Verify Your Email Address","text":"<ol> <li>Check your email inbox for a message from GitHub.</li> <li>Click the verification link in the email to activate your account.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#3-set-up-your-profile","title":"3. Set Up Your Profile","text":"<ol> <li>Click your profile icon in the top-right and select Your profile.</li> <li>Click Edit profile to add your name, bio, location, and profile picture.</li> <li>Save your changes.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#4-generate-ssh-key","title":"4. Generate SSH Key","text":"<ul> <li>When working with Git and GitHub, it\u2019s a good idea to set up SSH keys for secure authentication.</li> <li> <p>SSH keys are a pair of cryptographic keys that can be used to authenticate to GitHub without needing to enter your username and password every time.</p> </li> <li> <p>In your terminal, run:   <pre><code># Generate a new SSH key\n# -C is optional for email association with your GitHub account\nssh-keygen -t rsa -C \"your-email@example.com\"\n</code></pre></p> </li> <li> <p>This will create two files:</p> File Description <code>~/.ssh/id_rsa</code> Your private key (keep this secret) <code>~/.ssh/id_rsa.pub</code> Your public key (can be shared) <pre><code># Example output\n$ ssh-keygen -t rsa -C \"your-email@example.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa\nYour public key has been saved in /root/.ssh/id_rsa.pub &lt;&lt;&lt; &lt;&lt;&lt; &lt;&lt;&lt; This is the key you need\nThe key fingerprint is:\nSHA256:47MfTsMWlEN8PYpSGvYWlLd4u4fE4njqHrs53+oxEZM your-email@example.com\nThe key`s randomart image is:\n+---[RSA 3072]----+\n|         oo. .   |\n|        o.=oo o  |\n|       . =E* o . |\n|        o.=++    |\n|        Sooo .   |\n|       . o.o+    |\n|        +oOo o   |\n|        oXo*o .  |\n|       oOO*...   |\n+----[SHA256]-----+\n</code></pre> </li> <li> <p>Press Enter to accept the default file location and do not set a passphrase or you will be prompted to enter it each time you use the key.</p> </li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/#5-add-your-ssh-to-ssh-agent","title":"5. Add your SSH to ssh-agent","text":"<ul> <li>If you are using Windows, make sure you have Git Bash installed.</li> <li>If you are using Linux, make sure you have the <code>ssh-agent</code> package installed.</li> <li>If you are using macOS, you can use the built-in <code>ssh-agent</code>.</li> <li>Open Terminal and run:     <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\n</code></pre></li> </ul>"},{"location":"000-Setup/02-Setup-GitHub/#6-add-your-ssh-to-github","title":"6. Add your SSH to GitHub","text":"<ol> <li>Copy your public key to your clipboard:   <pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub  # macOS\ncat ~/.ssh/id_rsa.pub       # Linux/Windows, then copy manually\n</code></pre></li> <li>Go to GitHub site &gt; Settings &gt; SSH and GPG keys &gt; New SSH key.</li> <li>Paste your key, give it a title, and save.</li> </ol>"},{"location":"000-Setup/02-Setup-GitHub/#7-test-your-setup","title":"7. Test Your Setup","text":"<ul> <li>Run the following command to test your SSH connection:</li> </ul> <pre><code>ssh -T git@github.com\n</code></pre> <p>You should see a message like:</p> <pre><code>Hi &lt;username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/","title":"Creating a GitHub Repository Using GitHub MCP","text":"<ul> <li>This guide explains in detail how to create a new GitHub repository using the GitHub Copilot Model Context Protocol (MCP) extension installed in Visual Studio Code. </li> <li>The MCP extension allows you to automate repository management tasks, including repository creation, directly from the VS Code interface using natural language prompts.</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>Visual Studio</code> Code installed on your computer</li> <li>The <code>GitHub Copilot MCP</code> extension installed in VS Code</li> <li>A <code>GitHub account</code> with permission to create repositories</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#1-install-mcp-extension","title":"1. Install (MCP Extension)","text":"<ol> <li>Open Visual Studio Code.</li> <li>Go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on Mac).</li> <li>Search for <code>GitHub Copilot MCP</code> and click Install, or go to https://code.visualstudio.com/mcp</li> <li>Verify the installation by checking if the extension appears in the list of installed extensions.</li> <li>Verify the MCP server by opening <code>GitHub Copilot chat</code>, clicking on the settings icon, and ensuring the server status is \u201cRunning\u201d.</li> </ol>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#2-authenticate-with-github","title":"2. Authenticate with GitHub","text":"<ol> <li>After installation, you may be prompted to sign in to your GitHub account.</li> <li>Follow the on-screen instructions to complete authentication.</li> </ol>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#3-open-the-copilot-chat","title":"3. Open the Copilot Chat","text":"<ul> <li>Click on the Copilot icon in the sidebar or open the Copilot Chat panel from the Command Palette (<code>Cmd+Shift+P</code> &gt; \u201cCopilot: Chat\u201d)</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#4-create-repo-from-prompt","title":"4. Create repo from Prompt","text":"<ul> <li>In the Copilot Chat panel, enter a prompt such as:</li> </ul> <p>Prompt to create GitHub repository using GitHub Copilot MCP</p> <pre><code>Using GitHub Copilot MCP\nCreate a new GitHub repository named \"GitLab-MCP-Repo\"\nMake it public and add a README and a Python .gitignore\nAdd policy to protect the 'main' branch\n</code></pre> <ul> <li>You can customize the prompt to include details like description, visibility (public/private).license, and more. Here are some example prompts:</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#5-verify-vscode","title":"5. Verify (VsCode)","text":"<ul> <li>In the VsCode Github Copilot Chat panel, you should see something like:</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#6-verify-github","title":"6. Verify (GitHub)","text":"<ul> <li>Navigate to your GitHub account and go to the \u201cRepositories\u201d tab.</li> <li>You should see the newly created repository \u201cGitLab-MCP-Repo\u201d listed there.</li> <li>Click on the repository to view its contents and verify that the <code>README</code> and <code>.gitignore</code> files have been created.</li> </ul>"},{"location":"001-Working-With-Repo/01a-Creating-Repo-MCP/#references","title":"References","text":"<ul> <li>GitHub Copilot MCP Documentation</li> <li>GitHub Copilot in VS Code</li> </ul> <p>With the Copilot MCP extension in VS Code, you can create and manage repositories using simple, natural language prompts\u2014no manual API calls required!</p>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/","title":"Creating a GitHub Repository Using Web","text":"<ul> <li>This guide will walk you through the process of creating a new repository on GitHub using the web interface. </li> <li>Follow the steps below to set up your project repository quickly and efficiently.</li> </ul>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>A web browser (e.g., Chrome, Firefox, Safari)</li> </ul>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#1-creating-a-new-repository","title":"1. Creating a New Repository","text":"<ol> <li>Open your web browser and go to https://github.com.</li> <li>Click Sign in at the top right corner and enter your credentials.</li> <li>Once logged in, click the <code>Repositories</code> tab.</li> <li>Click on the New button to create a new repository.</li> <li>Fill in the repository details as prompted.<ul> <li>Owner: Choose your personal account or an organization you belong to.</li> <li>Repository name: Enter a unique name for your repository (e.g., <code>my-first-repo</code>).</li> <li>Description (optional): Add a short description of your project.</li> <li>Visibility:<ul> <li>Public: Anyone can see this repository.</li> <li>Private: Only you and people you explicitly share with can see this repository.</li> </ul> </li> <li>(Optional) Initialize this repository with:</li> <li>Add a README file: Recommended for project documentation.</li> <li>.gitignore: Choose a template if you want to ignore certain files.</li> <li>Choose a license: Select a license for your project.</li> </ul> </li> </ol>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#2-create-the-repository","title":"2: Create the Repository","text":"<ol> <li>Review your settings.</li> <li>Click the Create repository button at the bottom of the page.</li> </ol>"},{"location":"001-Working-With-Repo/01b-Creating-Repo-Web/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Creating a new repository</li> <li>GitHub Docs: Managing repository settings</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/","title":"Creating a GitHub Repository Using <code>gh</code>","text":"<ul> <li>This guide explains two ways to create a repository on GitHub using GitHub CLI (<code>gh</code>).</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (Sign up here if you don\u2019t have one)</li> <li>GitHub CLI (<code>gh</code>) installed</li> <li>Git installed (Download here)</li> <li>Authentication with <code>gh auth login</code></li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#1-authenticating-with-gh","title":"1. Authenticating with (<code>gh</code>)","text":"<ul> <li>Open your terminal and authenticate if you haven\u2019t already.</li> <li> <p>Execute the following and follow the prompts to log in via browser or SSH key.       <pre><code>gh auth login\n</code></pre></p> <pre><code>### Authenticating with GitHub CLI\n## You should see prompts like these:\n\n? Where do you use GitHub? GitHub.com\n? What is your preferred protocol for Git operations on this host? SSH\n? Upload your SSH public key to your GitHub account? /Users/xxxx/.ssh/id_rsa.pub\n? Title for your SSH key: GitHub CLI\n? How would you like to authenticate GitHub CLI? Login with a web browser\n\n! First copy your one-time code: XXXX-XXXX\nPress Enter to open https://github.com/login/device in your browser... \n</code></pre> </li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#2-create-a-new-repository","title":"2. Create a new repository:","text":"<pre><code>### Creating a new repository\ngh repo                       \\\n   create my-first-repo       \\\n   --description \"My gh repo\" \\\n   --add-readme               \\\n   --public                   \\\n   --clone\n</code></pre> <pre><code># You should see output like this:\n\u2713 Created repository nirgeier/my-first-repo on github.com\nhttps://github.com/nirgeier/my-first-repo\nCloning into 'my-first-repo'...\n</code></pre>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#3-verify-creation","title":"3. Verify creation:","text":"<pre><code># Verify the repository exists\ngh repo view my-first-repo --web\n</code></pre> <ul> <li>This opens your new repository in your browser.</li> </ul>"},{"location":"001-Working-With-Repo/01c-Creating-Repo-gh/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub CLI Docs: <code>gh repo create</code></li> </ul>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/","title":"Cloning a GitHub Repository","text":"<p>This guide explains how to clone a repository from GitHub to your local machine using the GitHub website and Git.</p>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed on your computer (Download Git)</li> <li>A GitHub account</li> </ul>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#1-find-the-repository","title":"1: Find the Repository","text":"<ol> <li>Go to https://github.com and log in.</li> <li>Navigate to the repository you want to clone.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#2-copy-the-repository-url","title":"2: Copy the Repository URL","text":"<ol> <li>Click the green Code button on the repository page.</li> <li>Choose the desired protocol:</li> <li>HTTPS (recommended for most users)</li> <li>SSH (requires SSH key setup)</li> <li>GitHub CLI</li> <li>Click the clipboard icon to copy the URL.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#3-clone-the-repository-locally","title":"3: Clone the Repository Locally","text":"<ol> <li>Open your terminal or command prompt.</li> <li>Run the following command, replacing <code>&lt;URL&gt;</code> with the copied repository URL:</li> <li>A new folder with the repository\u2019s name will be created in your current directory.</li> </ol> <pre><code>git clone &lt;URL&gt; [&lt;local-directory&gt;]\n</code></pre>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#4-start-working","title":"4: Start Working","text":"<ol> <li>Change into the repository directory:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>You can now start working with the code locally.</li> </ol>"},{"location":"001-Working-With-Repo/02-Cloning-Repo/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Cloning a repository</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/03-Making-Changes/","title":"Making Changes in a GitHub Repository","text":"<p>This guide explains how to make changes to files in your local copy of a GitHub repository.</p>"},{"location":"001-Working-With-Repo/03-Making-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>A cloned copy of the repository on your computer</li> <li>A text editor or IDE</li> </ul>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-1-open-the-repository","title":"Step 1: Open the Repository","text":"<ol> <li>Open your terminal and navigate to the repository folder:    <pre><code>cd &lt;repository-name&gt;\n</code></pre></li> <li>Open the project in your preferred editor (e.g., VS Code, Atom, Sublime Text).</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-2-edit-files","title":"Step 2: Edit Files","text":"<ol> <li>Use your editor to add, modify, or delete files as needed.</li> <li>Save your changes.</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-3-check-status","title":"Step 3: Check Status","text":"<ol> <li>In the terminal, run:    <pre><code>git status\n</code></pre></li> <li>This will show which files have been modified, added, or deleted.</li> </ol>"},{"location":"001-Working-With-Repo/03-Making-Changes/#step-4-review-changes","title":"Step 4: Review Changes","text":"<ul> <li>Review your changes in the editor or by using:   <pre><code>git diff\n</code></pre></li> </ul>"},{"location":"001-Working-With-Repo/03-Making-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Making changes to a file</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/04-Committing-Changes/","title":"Committing Changes in a GitHub Repository","text":"<p>This guide explains how to commit your changes to a local GitHub repository using Git.</p>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Changes made to files in your local repository</li> <li>Git installed on your computer</li> </ul>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-1-stage-your-changes","title":"Step 1: Stage Your Changes","text":"<ol> <li>Open your terminal and navigate to the repository folder.</li> <li>To stage all changes, run:    <pre><code>git add .\n</code></pre>    Or, to stage specific files:    <pre><code>git add &lt;filename&gt;\n</code></pre></li> </ol>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-2-commit-the-changes","title":"Step 2: Commit the Changes","text":"<ol> <li>Run the following command, replacing the message with a short description of your changes:    <pre><code>git commit -m \"Your commit message here\"\n</code></pre></li> </ol>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#step-3-check-commit-history","title":"Step 3: Check Commit History","text":"<ul> <li>To view your commit history, run:   <pre><code>git log --oneline\n</code></pre></li> </ul>"},{"location":"001-Working-With-Repo/04-Committing-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Committing changes to a repository</li> </ul> <p>End of Guide</p>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/","title":"Pushing Changes to GitHub","text":"<p>This guide explains how to push your local commits to a remote GitHub repository.</p>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Committed changes in your local repository</li> <li>Remote repository set up (e.g., on GitHub)</li> <li>Git installed on your computer</li> </ul>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-1-check-remote-repository","title":"Step 1: Check Remote Repository","text":"<ol> <li>In your terminal, run:    <pre><code>git remote -v\n</code></pre></li> <li>Ensure the correct remote URL is set (usually named <code>origin</code>).</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-2-push-your-changes","title":"Step 2: Push Your Changes","text":"<ol> <li>To push your changes to the main branch, run:    <pre><code>git push origin main\n</code></pre>    Replace <code>main</code> with your branch name if different.</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#step-3-verify-on-github","title":"Step 3: Verify on GitHub","text":"<ol> <li>Go to your repository page on GitHub.</li> <li>Confirm that your changes appear in the file list and commit history.</li> </ol>"},{"location":"001-Working-With-Repo/05-Pushing-Changes/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Docs: Pushing commits to a remote repository</li> </ul> <p>End of Guide</p>"},{"location":"002-Working-With-PR/","title":"Lab 002: Working with Pull Requests","text":"<p>This lab covers the complete workflow of working with pull requests in GitHub, from creating branches to managing the review and approval process.</p>"},{"location":"002-Working-With-PR/#lab-overview","title":"Lab Overview","text":"<p>This lab is divided into three main sections, each covering different aspects of the pull request workflow:</p>"},{"location":"002-Working-With-PR/#01-creating-local-branchmd","title":"01-Creating-Local-Branch.md","text":"<p>Learn how to create local branches and push them to remote repositories: - Creating and managing local branches - Pushing branches to remote repositories - Branch naming conventions and best practices - Keeping branches updated - Common troubleshooting scenarios</p>"},{"location":"002-Working-With-PR/#02-opening-pull-requestsmd","title":"02-Opening-Pull-Requests.md","text":"<p>Comprehensive guide to opening pull requests using multiple methods: - GitHub Web Interface: Step-by-step web-based PR creation - GitHub CLI: Command-line PR management - GitHub MCP Extension: AI-assisted PR creation in VS Code - Adding code and reviewing changes after PR creation - PR best practices and templates</p>"},{"location":"002-Working-With-PR/#03-working-with-pr-reviewsmd","title":"03-Working-With-PR-Reviews.md","text":"<p>Complete guide to the pull request review process: - Adding and managing code reviewers - Conducting thorough code reviews - Review approval workflows - Best practices for both reviewers and PR authors - Advanced features like CODEOWNERS and branch protection</p>"},{"location":"002-Working-With-PR/#prerequisites","title":"Prerequisites","text":"<p>Before starting this lab, ensure you have completed: - Lab 000: Setup - Development environment setup - Lab 001: Working with Repositories - Basic Git and GitHub operations</p>"},{"location":"002-Working-With-PR/#required-tools","title":"Required Tools","text":"<ul> <li>Git installed and configured</li> <li>GitHub account with proper authentication</li> <li>GitHub CLI (for CLI sections)</li> <li>VS Code with GitHub Copilot MCP extension (for MCP sections)</li> </ul>"},{"location":"002-Working-With-PR/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this lab, you will be able to:</p> <ol> <li>Branch Management</li> <li>Create and manage local branches effectively</li> <li>Push branches to remote repositories</li> <li> <p>Follow proper branch naming conventions</p> </li> <li> <p>Pull Request Creation</p> </li> <li>Create pull requests using GitHub Web, CLI, and MCP</li> <li>Write effective PR titles and descriptions</li> <li> <p>Add appropriate reviewers and labels</p> </li> <li> <p>Code Review Process</p> </li> <li>Conduct thorough code reviews</li> <li>Provide constructive feedback</li> <li>Manage the approval workflow</li> <li> <p>Handle review responses and iterations</p> </li> <li> <p>Collaboration Best Practices</p> </li> <li>Follow team workflows and conventions</li> <li>Use advanced GitHub features effectively</li> <li>Troubleshoot common PR issues</li> </ol>"},{"location":"002-Working-With-PR/#lab-structure","title":"Lab Structure","text":"<p>Each section builds upon the previous one:</p> <pre><code>Local Branch Creation \u2192 Pull Request Opening \u2192 Review Process\n</code></pre> <ol> <li>Start with creating a feature branch for your changes</li> <li>Open a pull request using your preferred method</li> <li>Go through the review process with teammates or reviewers</li> </ol>"},{"location":"002-Working-With-PR/#real-world-application","title":"Real-World Application","text":"<p>This lab simulates real-world development scenarios:</p> <ul> <li>Feature Development: Creating feature branches for new functionality</li> <li>Code Collaboration: Working with team members through pull requests</li> <li>Quality Assurance: Ensuring code quality through the review process</li> <li>Release Management: Managing code integration through proper workflows</li> </ul>"},{"location":"002-Working-With-PR/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Flow Guide</li> <li>Git Branching Best Practices</li> <li>Code Review Best Practices</li> <li>GitHub CLI Documentation</li> </ul>"},{"location":"002-Working-With-PR/#next-steps","title":"Next Steps","text":"<p>After completing this lab, you\u2019ll be ready for more advanced GitHub workflows including: - Advanced Git operations (rebasing, squashing) - GitHub Actions and CI/CD - Repository management and administration - Open source contribution workflows</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/","title":"Creating Local Branch and Pushing to Remote Repository","text":"<p>This guide explains how to create a local branch and push it to the remote repository. Working with branches is essential for collaborative development and maintaining a clean project history.</p>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed on your computer</li> <li>A cloned repository on your local machine</li> <li>Proper authentication setup with GitHub (SSH keys or HTTPS)</li> </ul>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#1-check-current-branch-status","title":"1. Check Current Branch Status","text":"<p>Before creating a new branch, check your current branch and repository status:</p> <pre><code># Check current branch\ngit branch\n\n# Check repository status\ngit status\n\n# Check remote branches\ngit branch -r\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#2-create-a-new-local-branch","title":"2. Create a New Local Branch","text":""},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#method-1-create-and-switch-to-new-branch","title":"Method 1: Create and Switch to New Branch","text":"<pre><code># Create and switch to a new branch\ngit checkout -b feature/new-feature\n\n# Alternative command (Git 2.23+)\ngit switch -c feature/new-feature\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#method-2-create-branch-without-switching","title":"Method 2: Create Branch Without Switching","text":"<pre><code># Create a new branch without switching to it\ngit branch feature/new-feature\n\n# Switch to the new branch later\ngit checkout feature/new-feature\n# or\ngit switch feature/new-feature\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#3-verify-branch-creation","title":"3. Verify Branch Creation","text":"<pre><code># List all local branches (current branch marked with *)\ngit branch\n\n# List all branches (local and remote)\ngit branch -a\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#4-make-changes-and-commit","title":"4. Make Changes and Commit","text":"<ol> <li>Make your changes to the files</li> <li>Add changes to staging area:    <pre><code>git add .\n# or add specific files\ngit add filename.txt\n</code></pre></li> <li>Commit your changes:    <pre><code>git commit -m \"Add new feature implementation\"\n</code></pre></li> </ol>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#5-push-branch-to-remote-repository","title":"5. Push Branch to Remote Repository","text":""},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#first-time-push-set-upstream","title":"First Time Push (Set Upstream)","text":"<pre><code># Push branch and set upstream tracking\ngit push -u origin feature/new-feature\n\n# Alternative syntax\ngit push --set-upstream origin feature/new-feature\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#subsequent-pushes","title":"Subsequent Pushes","text":"<pre><code># After upstream is set, simple push works\ngit push\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#6-verify-remote-branch","title":"6. Verify Remote Branch","text":"<ol> <li>Check if branch was created on GitHub:</li> <li>Go to your repository on GitHub</li> <li>Click on the branch dropdown (usually shows \u201cmain\u201d or \u201cmaster\u201d)</li> <li> <p>You should see your new branch listed</p> </li> <li> <p>Verify using Git commands:    <pre><code># List remote branches\ngit branch -r\n\n# Fetch latest remote information\ngit fetch origin\n</code></pre></p> </li> </ol>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#7-best-practices","title":"7. Best Practices","text":""},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#branch-naming-conventions","title":"Branch Naming Conventions","text":"<ul> <li>Feature branches: <code>feature/feature-name</code> or <code>feat/feature-name</code></li> <li>Bug fixes: <code>bugfix/bug-description</code> or <code>fix/bug-description</code></li> <li>Hotfixes: <code>hotfix/critical-fix</code></li> <li>Documentation: <code>docs/update-readme</code></li> </ul>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#examples","title":"Examples","text":"<pre><code>git checkout -b feature/user-authentication\ngit checkout -b bugfix/login-error\ngit checkout -b docs/api-documentation\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#keep-branch-updated","title":"Keep Branch Updated","text":"<pre><code># Switch to main branch\ngit checkout main\n\n# Pull latest changes\ngit pull origin main\n\n# Switch back to your feature branch\ngit checkout feature/new-feature\n\n# Merge or rebase main into your branch\ngit merge main\n# or\ngit rebase main\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#8-common-commands-summary","title":"8. Common Commands Summary","text":"<pre><code># Create and switch to new branch\ngit checkout -b branch-name\n\n# Push new branch to remote\ngit push -u origin branch-name\n\n# List all branches\ngit branch -a\n\n# Delete local branch (after merging)\ngit branch -d branch-name\n\n# Delete remote branch\ngit push origin --delete branch-name\n\n# Rename current branch\ngit branch -m new-branch-name\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#troubleshooting","title":"Troubleshooting","text":""},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#if-push-fails","title":"If Push Fails","text":"<ol> <li>Authentication issues: Ensure your SSH keys or personal access token are properly configured</li> <li>Branch already exists: Check if someone else created a branch with the same name</li> <li>Repository permissions: Ensure you have write access to the repository</li> </ol>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#common-error-solutions","title":"Common Error Solutions","text":"<pre><code># If you get \"fatal: The current branch has no upstream branch\"\ngit push -u origin current-branch-name\n\n# If you need to force push (use with caution)\ngit push --force-with-lease origin branch-name\n</code></pre>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#additional-resources","title":"Additional Resources","text":"<ul> <li>Git Branching Documentation</li> <li>GitHub Flow</li> <li>Git Best Practices</li> </ul>"},{"location":"002-Working-With-PR/01-Creating-Local-Branch/#end-of-guide","title":"End of Guide","text":""},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/","title":"Opening Pull Requests: Complete Guide","text":"<p>This guide provides a comprehensive overview of creating pull requests using three different methods. Each method has its own detailed guide for in-depth learning.</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#overview","title":"Overview","text":"<p>Pull requests are a fundamental part of collaborative software development. They allow you to propose changes, discuss them with your team, and merge them into the main codebase after review. This lab covers three primary methods for creating pull requests:</p> <ol> <li>GitHub Web Interface - Visual, user-friendly approach</li> <li>GitHub CLI - Command-line efficiency for developers</li> <li>GitHub MCP Extension - AI-powered natural language approach</li> </ol>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#prerequisites","title":"Prerequisites","text":"<ul> <li>A repository with at least one branch containing changes</li> <li>Proper authentication setup with GitHub</li> <li>Basic understanding of Git branching concepts</li> </ul>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#method-specific-requirements","title":"Method-Specific Requirements","text":"<ul> <li>GitHub Web: Web browser and GitHub account</li> <li>GitHub CLI: GitHub CLI installed (<code>gh</code> command)</li> <li>GitHub MCP: VS Code with GitHub Copilot MCP extension</li> </ul>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#method-comparison","title":"Method Comparison","text":"Feature GitHub Web GitHub CLI GitHub MCP Ease of Use Beginner-friendly Developer-focused AI-assisted Speed Medium Fast Very Fast Automation Limited High Very High Customization Good Excellent Good Offline Capability No Yes No Bulk Operations No Yes Limited"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#detailed-method-guides","title":"Detailed Method Guides","text":""},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#method-1-github-web-interface","title":"Method 1: GitHub Web Interface","text":"<p>Best for: Beginners, visual learners, occasional contributors</p> <p>Key Features: - Visual interface with guided workflow - Real-time preview of changes - Integrated with GitHub\u2019s collaboration features - Template support and rich text editing</p> <p>When to Use: - First time creating pull requests - Making documentation changes - Quick fixes and small changes - When you need visual diff review</p> <p>\ud83d\udc49 Read the complete GitHub Web Interface guide</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#method-2-github-cli","title":"Method 2: GitHub CLI","text":"<p>Best for: Developers, automation enthusiasts, power users</p> <p>Key Features: - Command-line efficiency - Scriptable and automatable - Bulk operations support - Integration with shell workflows</p> <p>When to Use: - Daily development workflow - Automation and scripting - Bulk PR operations - Terminal-based development environment</p> <p>\ud83d\udc49 Read the complete GitHub CLI guide</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#method-3-github-mcp-extension","title":"Method 3: GitHub MCP Extension","text":"<p>Best for: AI-powered workflows, natural language interactions</p> <p>Key Features: - Natural language commands - AI-assisted PR creation - Context-aware suggestions - Integration with VS Code</p> <p>When to Use: - Rapid PR creation - Complex PR metadata setup - Learning GitHub workflows - AI-enhanced development experience</p> <p>\ud83d\udc49 Read the complete GitHub MCP Extension guide</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#common-workflow-adding-code-after-pr-creation","title":"Common Workflow: Adding Code After PR Creation","text":"<p>Regardless of which method you use to create the PR, you can add new code and updates using any of these approaches:</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#direct-git-commands","title":"Direct Git Commands","text":"<pre><code># Make changes to your files\ngit add .\ngit commit -m \"Address review feedback\"\ngit push origin feature-branch\n</code></pre> <p>The PR will automatically update with new commits.</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#cross-method-updates","title":"Cross-Method Updates","text":"<ul> <li>Create with Web \u2192 Update with CLI commands</li> <li>Create with CLI \u2192 Add commits via Web interface</li> <li>Create with MCP \u2192 Push updates using Git</li> </ul>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#best-practices-across-all-methods","title":"Best Practices Across All Methods","text":""},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#pr-title-guidelines","title":"PR Title Guidelines","text":"<ul> <li>Use imperative mood: \u201cAdd feature\u201d not \u201cAdded feature\u201d</li> <li>Keep it concise but descriptive</li> <li>Include ticket numbers: \u201cFix #123: Resolve login issue\u201d</li> </ul>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Summary\nBrief description of what this PR does\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Changes Made\n- Detailed list of changes\n- Each change as a bullet point\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n\n## Related Issues\nCloses #123\nRelated to #456\n</code></pre>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#universal-best-practices","title":"Universal Best Practices","text":"<ol> <li>Self-review first: Review your own code before requesting reviews</li> <li>Keep PRs focused: One feature or fix per PR</li> <li>Write clear commit messages: Each commit should be atomic</li> <li>Add tests: Include relevant tests for your changes</li> <li>Update documentation: Keep docs in sync with code changes</li> </ol>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#pr-not-showing-changes","title":"PR Not Showing Changes","text":"<pre><code># Ensure you've pushed your branch\ngit push origin feature-branch-name\n\n# Check if you're comparing the right branches\ngit branch -a\n</code></pre>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#cannot-create-pr","title":"Cannot Create PR","text":"<ol> <li>Permission issues: Ensure you have write access to the repository</li> <li>No changes: Verify your branch has commits different from the base branch</li> <li>Same branch: Cannot create PR from a branch to itself</li> </ol>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#pr-shows-too-many-changes","title":"PR Shows Too Many Changes","text":"<ol> <li>Wrong base branch: Ensure you\u2019re comparing against the correct base</li> <li>Outdated branch: Your branch might be behind the base branch</li> </ol> <pre><code># Update your branch\ngit checkout main\ngit pull origin main\ngit checkout your-feature-branch\ngit rebase main\ngit push --force-with-lease origin your-feature-branch\n</code></pre>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#choosing-the-right-method","title":"Choosing the Right Method","text":""},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#for-beginners","title":"For Beginners","text":"<p>Start with GitHub Web Interface to understand the PR process visually, then gradually move to other methods as you become more comfortable.</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#for-daily-development","title":"For Daily Development","text":"<p>Use GitHub CLI for efficient, repeatable workflows that integrate well with your terminal-based development environment.</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#for-ai-enhanced-workflows","title":"For AI-Enhanced Workflows","text":"<p>Try GitHub MCP Extension when you want to leverage AI assistance and natural language commands for faster PR creation.</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#hybrid-approach","title":"Hybrid Approach","text":"<p>Many developers use a combination: - MCP/CLI for creating PRs quickly - Web Interface for detailed review and collaboration - CLI for bulk operations and automation</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#next-steps","title":"Next Steps","text":"<p>After mastering PR creation, proceed to: - Working with PR Reviews - Advanced Git workflows - Continuous Integration with PRs - Team collaboration best practices</p>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub PR Documentation</li> <li>GitHub CLI Manual</li> <li>GitHub Copilot Documentation</li> <li>Best Practices for Pull Requests</li> </ul>"},{"location":"002-Working-With-PR/02-Opening-Pull-Requests/#end-of-guide","title":"End of Guide","text":""},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/","title":"Opening Pull Requests via GitHub Web Interface","text":"<p>This guide explains how to create pull requests using the GitHub web interface. This is the most visual and user-friendly method for creating pull requests.</p>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#prerequisites","title":"Prerequisites","text":"<ul> <li>A repository with at least one branch containing changes</li> <li>Proper authentication setup with GitHub</li> <li>Your feature branch has been pushed to the remote repository</li> </ul>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#1-navigate-to-repository","title":"1: Navigate to Repository","text":"<ol> <li>Go to your repository on GitHub.com</li> <li>Ensure your feature branch has been pushed to the remote repository</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#2-create-pull-request","title":"2: Create Pull Request","text":"<ol> <li>Click the \u201cCompare &amp; pull request\u201d button (appears automatically after pushing a new branch)</li> </ol> <p>OR</p> <ol> <li>Navigate manually:</li> <li>Click the \u201cPull requests\u201d tab</li> <li>Click \u201cNew pull request\u201d</li> <li>Select the base branch (usually <code>main</code> or <code>master</code>)</li> <li>Select your feature branch as the compare branch</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#3-fill-pull-request-details","title":"3: Fill Pull Request Details","text":"<ol> <li>Title: Provide a clear, descriptive title</li> </ol> <pre><code>Example: Add user authentication feature\n</code></pre> <ol> <li>Description: Include detailed information:</li> </ol> <pre><code>## Description\nThis PR implements user authentication using JWT tokens.\n\n## Changes Made\n- Added login/logout functionality\n- Implemented JWT token validation\n- Added user session management\n\n## Testing\n- [x] Unit tests pass\n- [x] Manual testing completed\n- [x] No breaking changes\n\n## Screenshots\n(Add relevant screenshots if applicable)\n</code></pre> <ol> <li>Assignees: Assign yourself or team members</li> <li>Reviewers: Add code reviewers</li> <li>Labels: Add appropriate labels (feature, bugfix, etc.)</li> <li>Projects: Link to project boards if applicable</li> <li>Milestone: Associate with project milestones</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#4-submit-pull-request","title":"4: Submit Pull Request","text":"<ol> <li>Choose PR type:</li> <li>\u201cCreate pull request\u201d for ready-to-review PRs</li> <li>\u201cCreate draft pull request\u201d for work-in-progress</li> <li>Click the button to create the PR</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#managing-pr-via-github-web","title":"Managing PR via GitHub Web","text":""},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#updating-pr-title-and-description","title":"Updating PR Title and Description","text":"<ol> <li>Go to your PR</li> <li>Click the edit button next to title/description</li> <li>Make changes and save</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#adding-reviewers-and-assignees","title":"Adding Reviewers and Assignees","text":"<ol> <li>Use the sidebar on the PR page</li> <li>Click gear icons next to \u201cReviewers\u201d and \u201cAssignees\u201d</li> <li>Select users from the dropdown</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#adding-new-code-after-pr-creation","title":"Adding New Code After PR Creation","text":"<ol> <li>Navigate to your PR</li> <li>Click \u201cAdd more commits\u201d or edit files directly on GitHub</li> <li>Use the web editor to make small changes</li> <li>Commit directly to the PR branch</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#viewing-changes","title":"Viewing Changes","text":"<ol> <li>Go to your pull request</li> <li>Click the \u201cFiles changed\u201d tab</li> <li>Review the diff view showing:</li> <li>Added lines (green)</li> <li>Removed lines (red)</li> <li>Modified lines (yellow background)</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#best-practices-for-github-web-interface","title":"Best Practices for GitHub Web Interface","text":""},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#using-the-web-editor-effectively","title":"Using the Web Editor Effectively","text":"<ul> <li>Use for small changes and quick fixes</li> <li>Good for documentation updates</li> <li>Ideal for reviewing and suggesting changes</li> <li>Limited for complex code changes</li> </ul>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#branch-protection-integration","title":"Branch Protection Integration","text":"<ul> <li>The web interface shows all required status checks</li> <li>Displays merge conflicts clearly</li> <li>Shows required reviews status</li> <li>Integrates with branch protection rules</li> </ul>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#collaboration-features","title":"Collaboration Features","text":"<ul> <li>Use @mentions to notify team members</li> <li>Link to issues using #issue-number</li> <li>Use project boards integration</li> <li>Leverage milestone tracking</li> </ul>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#troubleshooting","title":"Troubleshooting","text":""},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#pr-not-appearing","title":"PR Not Appearing","text":"<ol> <li>Check branch push: Ensure your branch is pushed to the remote repository</li> </ol> <pre><code>git push origin feature-branch-name\n</code></pre> <ol> <li>Verify repository access: Ensure you have proper permissions</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#cannot-create-pr","title":"Cannot Create PR","text":"<ol> <li>Permission issues: Ensure you have write access to the repository</li> <li>No changes: Verify your branch has commits different from the base branch</li> <li>Same branch: Cannot create PR from a branch to itself</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#missing-compare-button","title":"Missing Compare Button","text":"<ol> <li>The \u201cCompare &amp; pull request\u201d button only appears for recently pushed branches</li> <li>Use the manual method: Pull requests tab \u2192 New pull request</li> <li>Ensure you\u2019re viewing the correct repository</li> </ol>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub PR Documentation</li> <li>GitHub Web Editor Guide</li> <li>Branch Protection Rules</li> </ul>"},{"location":"002-Working-With-PR/02a-Opening-PR-GitHub-Web/#end-of-guide","title":"End of Guide","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/","title":"Opening Pull Requests via GitHub CLI","text":"<p>This guide explains how to create and manage pull requests using the GitHub CLI (gh command). This method is perfect for developers who prefer command-line workflows.</p>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#prerequisites","title":"Prerequisites","text":"<ul> <li>A repository with at least one branch containing changes</li> <li>GitHub CLI installed (<code>gh</code> command)</li> <li>Proper authentication setup with GitHub CLI</li> </ul>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#1-install-and-authenticate-github-cli","title":"1: Install and Authenticate GitHub CLI","text":"<pre><code># Install GitHub CLI (if not already installed)\n# macOS\nbrew install gh\n\n# Windows\nwinget install --id GitHub.cli\n\n# Linux (Ubuntu/Debian)\nsudo apt install gh\n\n# Authenticate\ngh auth login\n</code></pre> <p>Follow the interactive prompts to authenticate with your GitHub account.</p>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#2-create-pull-request","title":"2: Create Pull Request","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#basic-pr-creation","title":"Basic PR Creation","text":"<pre><code># Basic PR creation\ngh pr create --title \"Add user authentication feature\" --body \"Detailed description of changes\"\n\n# Interactive PR creation (recommended for beginners)\ngh pr create\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#pr-with-specific-options","title":"PR with Specific Options","text":"<pre><code># PR with comprehensive options\ngh pr create \\\n  --title \"Add user authentication feature\" \\\n  --body \"This PR implements user authentication using JWT tokens\" \\\n  --assignee @me \\\n  --reviewer username1,username2 \\\n  --label feature,authentication \\\n  --milestone \"v1.0.0\"\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#3-advanced-github-cli-options","title":"3: Advanced GitHub CLI Options","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#draft-and-branch-options","title":"Draft and Branch Options","text":"<pre><code># Create draft PR\ngh pr create --draft --title \"WIP: User authentication\"\n\n# Create PR to specific base branch\ngh pr create --base develop --title \"Feature implementation\"\n\n# Create PR with body from file\ngh pr create --title \"New feature\" --body-file pr-description.md\n\n# Create PR and open in browser\ngh pr create --web\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#template-and-metadata","title":"Template and Metadata","text":"<pre><code># Use PR template\ngh pr create --template .github/pull_request_template.md\n\n# Add multiple labels\ngh pr create --label bug,high-priority,backend\n\n# Add team reviewers\ngh pr create --reviewer @organization/team-name\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#managing-prs-with-github-cli","title":"Managing PRs with GitHub CLI","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#viewing-pull-requests","title":"Viewing Pull Requests","text":"<pre><code># List all PRs\ngh pr list\n\n# List PRs with specific filters\ngh pr list --state open --author @me\ngh pr list --label bug\ngh pr list --assignee username\n\n# View specific PR details\ngh pr view 123\ngh pr view 123 --json title,body,state\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#updating-pull-requests","title":"Updating Pull Requests","text":"<pre><code># Update title\ngh pr edit 123 --title \"New title\"\n\n# Update description\ngh pr edit 123 --body \"Updated description\"\n\n# Update from file\ngh pr edit 123 --body-file new-description.md\n\n# Add reviewers\ngh pr edit 123 --add-reviewer username1,username2\n\n# Add assignees\ngh pr edit 123 --add-assignee @me,username\n\n# Add labels\ngh pr edit 123 --add-label feature,documentation\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#working-with-pr-code","title":"Working with PR Code","text":"<pre><code># Checkout PR locally for testing\ngh pr checkout 123\n\n# View PR diff\ngh pr diff 123\n\n# View PR status (checks, reviews)\ngh pr status\n\n# Make changes and push updates\ngit add .\ngit commit -m \"Update based on feedback\"\ngit push\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#adding-new-code-after-pr-creation","title":"Adding New Code After PR Creation","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#method-1-direct-commits","title":"Method 1: Direct Commits","text":"<pre><code># Make changes to your files\n# Stage changes\ngit add .\n\n# Commit changes\ngit commit -m \"Address review feedback\"\n\n# Push to the same branch\ngit push origin feature-branch\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#method-2-checkout-and-update","title":"Method 2: Checkout and Update","text":"<pre><code># Checkout the PR branch\ngh pr checkout 123\n\n# Make your changes\n# Add and commit\ngit add .\ngit commit -m \"Update based on feedback\"\n\n# Push updates\ngit push\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#review-and-merge-operations","title":"Review and Merge Operations","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#managing-reviews","title":"Managing Reviews","text":"<pre><code># Request review from specific users\ngh pr edit 123 --add-reviewer alice,bob\n\n# View review status\ngh pr checks 123\n\n# Add review comment\ngh pr comment 123 --body \"Great work on this feature!\"\n\n# Review and approve\ngh pr review 123 --approve --body \"LGTM! Great implementation.\"\n\n# Request changes\ngh pr review 123 --request-changes --body \"Please address the security concerns.\"\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#merging-pull-requests","title":"Merging Pull Requests","text":"<pre><code># Merge PR (default merge commit)\ngh pr merge 123\n\n# Squash and merge\ngh pr merge 123 --squash\n\n# Rebase and merge\ngh pr merge 123 --rebase\n\n# Merge with custom commit message\ngh pr merge 123 --squash --body \"Implement user authentication feature\"\n\n# Delete branch after merge\ngh pr merge 123 --delete-branch\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#advanced-cli-workflows","title":"Advanced CLI Workflows","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#bulk-operations","title":"Bulk Operations","text":"<pre><code># Close multiple PRs\ngh pr list --json number --jq '.[].number' | xargs -I {} gh pr close {}\n\n# Review all open PRs assigned to you\ngh pr list --assignee @me --json number --jq '.[].number' | xargs -I {} gh pr view {}\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#custom-scripts-and-automation","title":"Custom Scripts and Automation","text":"<pre><code># Create PR with template and auto-assign\ncreate_pr() {\n  gh pr create \\\n    --title \"$1\" \\\n    --body-file .github/pr_template.md \\\n    --assignee @me \\\n    --reviewer @organization/team \\\n    --label feature\n}\n\n# Usage\ncreate_pr \"Add new authentication feature\"\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#integration-with-git-aliases","title":"Integration with Git Aliases","text":"<pre><code># Add to your .gitconfig\ngit config --global alias.pr '!gh pr create --web'\ngit config --global alias.prs '!gh pr list'\ngit config --global alias.prv '!gh pr view'\n\n# Now you can use\ngit pr          # Create PR and open in browser\ngit prs         # List all PRs\ngit prv 123     # View PR 123\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#configuration-and-customization","title":"Configuration and Customization","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#github-cli-configuration","title":"GitHub CLI Configuration","text":"<pre><code># Set default editor for PR descriptions\ngh config set editor code\n\n# Set default browser\ngh config set browser firefox\n\n# View current configuration\ngh config list\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#creating-aliases","title":"Creating Aliases","text":"<pre><code># Create custom aliases\ngh alias set prc 'pr create --web'\ngh alias set prv 'pr view --web'\ngh alias set prl 'pr list --state open'\n\n# Use aliases\ngh prc  # Create PR and open in web\ngh prv  # View PR in web\ngh prl  # List open PRs\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#best-practices-for-github-cli","title":"Best Practices for GitHub CLI","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#efficient-workflows","title":"Efficient Workflows","text":"<ol> <li>Use interactive mode for learning: <code>gh pr create</code></li> <li>Create aliases for frequently used commands</li> <li>Use templates for consistent PR descriptions</li> <li>Combine with shell scripts for automation</li> </ol>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#security-considerations","title":"Security Considerations","text":"<pre><code># Use specific scopes for authentication\ngh auth login --scopes repo,read:org\n\n# Use environment variables for automation\nexport GITHUB_TOKEN=\"your_token_here\"\ngh pr create --title \"Automated PR\"\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#error-handling","title":"Error Handling","text":"<pre><code># Check if PR exists before creating\nif gh pr list --json number --jq '.[] | select(.head.ref==\"feature-branch\")' | grep -q number; then\n  echo \"PR already exists for this branch\"\nelse\n  gh pr create --title \"New feature\"\nfi\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Re-authenticate\ngh auth logout\ngh auth login\n\n# Check authentication status\ngh auth status\n\n# Use different authentication method\ngh auth login --with-token &lt; token.txt\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#common-command-issues","title":"Common Command Issues","text":"<pre><code># If PR creation fails, check current branch\ngit branch --show-current\n\n# Ensure you're in a git repository\ngit status\n\n# Check remote configuration\ngit remote -v\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#api-rate-limits","title":"API Rate Limits","text":"<pre><code># Check API rate limit status\ngh api rate_limit\n\n# Use --json flag to reduce API calls\ngh pr list --json number,title,state\n</code></pre>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub CLI Manual</li> <li>GitHub CLI PR Commands</li> <li>GitHub CLI Configuration</li> </ul>"},{"location":"002-Working-With-PR/02b-Opening-PR-GitHub-CLI/#end-of-guide","title":"End of Guide","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/","title":"Opening Pull Requests via GitHub MCP Extension","text":"<p>This guide explains how to create and manage pull requests using the GitHub Model Context Protocol (MCP) extension in Visual Studio Code. This AI-powered method allows you to create PRs using natural language commands.</p>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code installed</li> <li>GitHub Copilot MCP extension installed and configured</li> <li>A repository with at least one branch containing changes</li> <li>Proper authentication setup with GitHub</li> </ul>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#1-install-and-setup-github-mcp-extension","title":"1: Install and Setup GitHub MCP Extension","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#installation","title":"Installation","text":"<ol> <li>Open Visual Studio Code</li> <li>Go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on Mac)</li> <li>Search for <code>GitHub Copilot MCP</code> and click Install</li> <li>Verify the installation by checking if the extension appears in the list of installed extensions</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#authentication","title":"Authentication","text":"<ol> <li>After installation, you may be prompted to sign in to your GitHub account</li> <li>Follow the on-screen instructions to complete authentication</li> <li>Verify the MCP server by opening GitHub Copilot chat and checking the server status</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#2-open-vs-code-with-github-mcp","title":"2: Open VS Code with GitHub MCP","text":"<ol> <li>Ensure GitHub Copilot MCP extension is installed and running</li> <li>Open the Copilot Chat panel in VS Code:</li> <li>Click the Copilot icon in the sidebar</li> <li>Or use Command Palette (<code>Cmd+Shift+P</code>) \u2192 \u201cCopilot: Chat\u201d</li> <li>Verify MCP connection by checking the settings icon in the chat panel</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#3-create-pull-request-using-natural-language","title":"3: Create Pull Request Using Natural Language","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#basic-pr-creation","title":"Basic PR Creation","text":"<p>Use natural language prompts in the Copilot Chat:</p> <pre><code>Create a pull request for my current branch \"feature/user-auth\" \nwith title \"Add user authentication feature\" \nand description \"This PR implements JWT-based user authentication with login/logout functionality\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#comprehensive-pr-creation","title":"Comprehensive PR Creation","text":"<pre><code>Open a pull request from my feature branch to main branch.\nTitle: \"Fix login bug\"\nDescription: \"Resolves issue with password validation. Updated regex patterns and added input sanitization.\"\nAdd reviewers: john.doe, jane.smith\nAdd labels: bugfix, high-priority\nAssign to: @me\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#advanced-pr-options","title":"Advanced PR Options","text":"<pre><code>Create a draft pull request with title \"WIP: User dashboard redesign\"\nDescription: \"Initial implementation of new user dashboard. Still working on mobile responsiveness.\"\nAdd team reviewers: @frontend-team\nAdd labels: feature, ui, work-in-progress\nLink to project: User Experience Improvements\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#4-follow-mcp-prompts-and-confirmation","title":"4: Follow MCP Prompts and Confirmation","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#interactive-process","title":"Interactive Process","text":"<ol> <li>The MCP extension will guide you through the process</li> <li>Review the generated PR details in the chat response</li> <li>Confirm the details when prompted</li> <li>The PR will be created automatically</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#confirmation-examples","title":"Confirmation Examples","text":"<pre><code>MCP Response: \"I'll create a pull request with the following details:\n- Branch: feature/user-auth \u2192 main\n- Title: Add user authentication feature\n- Reviewers: john.doe, jane.smith\n- Labels: feature, authentication\n\nProceed with creation? (yes/no)\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#managing-prs-with-github-mcp","title":"Managing PRs with GitHub MCP","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#updating-existing-prs","title":"Updating Existing PRs","text":"<pre><code>Update my pull request title to \"Improved user authentication feature\"\n</code></pre> <pre><code>Add reviewers alice.cooper and @backend-team to pull request #123\n</code></pre> <pre><code>Update PR #456 description to include:\n\"## Changes\n- Fixed validation bug\n- Added unit tests\n- Updated documentation\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#adding-code-after-pr-creation","title":"Adding Code After PR Creation","text":"<pre><code>I've made some changes to my feature branch. Please update pull request #123 with these new commits.\n</code></pre> <pre><code>Add a comment to my current pull request explaining that I've addressed the review feedback and added unit tests.\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#viewing-pr-information","title":"Viewing PR Information","text":"<pre><code>Show me the details of pull request #123\n</code></pre> <pre><code>What files were modified in my current pull request?\n</code></pre> <pre><code>Show me the review status and checks for PR #456\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#advanced-mcp-features","title":"Advanced MCP Features","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#automated-pr-templates","title":"Automated PR Templates","text":"<pre><code>Create a pull request using our standard template:\n- Branch: feature/payment-integration\n- Title: Implement Stripe payment integration\n- Type: New feature\n- Include testing checklist\n- Add backend team as reviewers\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#bulk-operations","title":"Bulk Operations","text":"<pre><code>Create pull requests for all my feature branches that start with \"feature/auth-\"\nUse template: \"Authentication improvements\"\nAdd security team as reviewers\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#integration-with-project-management","title":"Integration with Project Management","text":"<pre><code>Create PR for issue #789 \"Implement user roles\"\nLink to milestone: \"User Management v2.0\"\nAdd project: \"Backend Infrastructure\"\nSet labels based on issue labels\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#natural-language-patterns-for-mcp","title":"Natural Language Patterns for MCP","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#effective-prompting-techniques","title":"Effective Prompting Techniques","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#be-specific-and-clear","title":"Be Specific and Clear","text":"<pre><code>\u2705 Good:\n\"Create PR from feature/cart-checkout to main, title 'Add shopping cart checkout flow', add @ecommerce-team as reviewers\"\n\n\u274c Avoid:\n\"Make a PR for the cart thing\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#use-structured-requests","title":"Use Structured Requests","text":"<pre><code>\u2705 Good:\n\"Create pull request:\n- From: feature/api-security\n- To: develop\n- Title: Enhance API security measures\n- Description: Implement rate limiting and input validation\n- Reviewers: @security-team, john.security\n- Labels: security, enhancement, api\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#include-context","title":"Include Context","text":"<pre><code>\u2705 Good:\n\"Create PR for the authentication feature I've been working on. This implements OAuth2 integration and requires security team review before merging to main.\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#common-mcp-commands","title":"Common MCP Commands","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#pr-creation-commands","title":"PR Creation Commands","text":"<pre><code>\"Create a pull request\"\n\"Open a PR from my current branch\"\n\"Make a pull request with reviewers\"\n\"Draft PR for work in progress\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#pr-management-commands","title":"PR Management Commands","text":"<pre><code>\"Update my PR title\"\n\"Add reviewers to PR #123\"\n\"Change PR description\"\n\"Convert draft to ready for review\"\n\"Add labels to my pull request\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#information-commands","title":"Information Commands","text":"<pre><code>\"Show my open pull requests\"\n\"What's the status of PR #456?\"\n\"List all PRs waiting for my review\"\n\"Show PR diff for #123\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#best-practices-for-github-mcp","title":"Best Practices for GitHub MCP","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#workflow-integration","title":"Workflow Integration","text":"<ol> <li>Consistent Naming: Use consistent branch and PR naming conventions</li> <li>Template Usage: Develop standard prompts for your team</li> <li>Context Awareness: Provide relevant context in your requests</li> <li>Verification: Always review MCP suggestions before confirming</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#team-collaboration","title":"Team Collaboration","text":"<pre><code># Team-specific reviewer assignment\n\"Create PR and add our usual frontend reviewers: @alice, @bob, @frontend-team\"\n\n# Project-based labeling\n\"Create PR with labels matching our current sprint: sprint-24, feature, high-priority\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#automation-workflows","title":"Automation Workflows","text":"<pre><code># Automated PR creation for releases\n\"Create release PR from develop to main, title 'Release v2.1.0', add all team leads as reviewers\"\n\n# Hotfix workflows\n\"Create hotfix PR, title 'Critical security patch', add security team, mark as urgent\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#troubleshooting-mcp-issues","title":"Troubleshooting MCP Issues","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#extension-not-responding","title":"Extension Not Responding","text":"<ol> <li>Check MCP Server Status:</li> <li>Open Copilot Chat</li> <li>Click settings icon</li> <li> <p>Verify MCP server is \u201cRunning\u201d</p> </li> <li> <p>Restart Extension:</p> </li> <li>Command Palette \u2192 \u201cDeveloper: Reload Window\u201d</li> <li>Or restart VS Code completely</li> </ol>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#authentication-problems","title":"Authentication Problems","text":"<pre><code># Check authentication in chat\n\"What's my GitHub authentication status?\"\n\n# Re-authenticate if needed\n\"Help me re-authenticate with GitHub\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#command-not-understood","title":"Command Not Understood","text":"<pre><code># If MCP doesn't understand, be more explicit\nInstead of: \"Make a PR\"\nTry: \"Create a GitHub pull request from my current branch to main\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#limited-repository-access","title":"Limited Repository Access","text":"<pre><code># Verify repository access\n\"Can you see my repository [repo-name]?\"\n\n# Check permissions\n\"What repositories do I have access to?\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#integration-with-vs-code-features","title":"Integration with VS Code Features","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#source-control-integration","title":"Source Control Integration","text":"<pre><code>\"Create PR for my staged changes with commit message as PR description\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#file-explorer-context","title":"File Explorer Context","text":"<pre><code>\"Create PR including only the files I have selected in the explorer\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#git-integration","title":"Git Integration","text":"<pre><code>\"Create PR for the last 3 commits on my current branch\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#security-and-privacy-considerations","title":"Security and Privacy Considerations","text":""},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#data-handling","title":"Data Handling","text":"<ul> <li>MCP processes requests through GitHub\u2019s API</li> <li>Your code and PR descriptions are handled according to GitHub\u2019s privacy policy</li> <li>Sensitive information should not be included in prompts</li> </ul>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#best-practices","title":"Best Practices","text":"<pre><code># Avoid sensitive information in prompts\n\u274c Don't: \"Create PR with API key abc123def456\"\n\u2705 Do: \"Create PR for API authentication changes\"\n</code></pre>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Copilot MCP Documentation</li> <li>VS Code GitHub Integration</li> <li>GitHub API Documentation</li> </ul>"},{"location":"002-Working-With-PR/02c-Opening-PR-GitHub-MCP/#end-of-guide","title":"End of Guide","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/","title":"Working with Pull Requests: Adding Reviewers, Review Process &amp; Approval","text":"<p>This guide covers the complete pull request review workflow, including adding code reviewers, conducting reviews, and managing the approval process using GitHub Web, GitHub CLI, and GitHub MCP.</p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#prerequisites","title":"Prerequisites","text":"<ul> <li>An open pull request in a GitHub repository</li> <li>Proper permissions to request reviews and approve changes</li> <li>Understanding of the codebase and review requirements</li> </ul>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-1-adding-code-reviewers-to-pull-requests","title":"Part 1: Adding Code Reviewers to Pull Requests","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#method-1-adding-reviewers-via-github-web-interface","title":"Method 1: Adding Reviewers via GitHub Web Interface","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-1-navigate-to-your-pull-request","title":"Step 1: Navigate to Your Pull Request","text":"<ol> <li>Go to your repository on GitHub</li> <li>Click on the \u201cPull requests\u201d tab</li> <li>Select the pull request you want to add reviewers to</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-2-add-individual-reviewers","title":"Step 2: Add Individual Reviewers","text":"<ol> <li>Look for the \u201cReviewers\u201d section in the right sidebar</li> <li>Click the gear icon (\u2699\ufe0f) next to \u201cReviewers\u201d</li> <li>Search for and select reviewers by:</li> <li>Username</li> <li>Full name</li> <li>Team name (if you have access to teams)</li> <li>Click on the reviewer name to add them</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-3-request-team-reviews","title":"Step 3: Request Team Reviews","text":"<ol> <li>In the \u201cReviewers\u201d section, you can also add entire teams</li> <li>Type the team name (e.g., <code>@organization/team-name</code>)</li> <li>Select the team from the dropdown</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-4-add-review-requirements","title":"Step 4: Add Review Requirements","text":"<ol> <li>Repository admins can set up branch protection rules</li> <li>Go to Settings &gt; Branches</li> <li>Add branch protection rule for main/master branch</li> <li>Enable \u201cRequire pull request reviews before merging\u201d</li> <li>Set number of required approving reviews</li> <li>Enable \u201cRequire review from code owners\u201d if you have a CODEOWNERS file</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#method-2-adding-reviewers-via-github-cli","title":"Method 2: Adding Reviewers via GitHub CLI","text":"<pre><code># Add individual reviewers\ngh pr edit [PR-number] --add-reviewer username1,username2\n\n# Add team reviewers\ngh pr edit [PR-number] --add-reviewer @organization/team-name\n\n# Add both individuals and teams\ngh pr edit [PR-number] --add-reviewer user1,user2,@org/team\n\n# Remove reviewers\ngh pr edit [PR-number] --remove-reviewer username\n\n# View current reviewers\ngh pr view [PR-number]\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#method-3-adding-reviewers-via-github-mcp","title":"Method 3: Adding Reviewers via GitHub MCP","text":"<p>Use natural language prompts in VS Code Copilot Chat:</p> <pre><code>Add john.doe and jane.smith as reviewers to pull request #123\n</code></pre> <pre><code>Request review from the @frontend-team for my current pull request\n</code></pre> <pre><code>Add code reviewers: alice, bob, and @backend-team to PR #456\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-2-conducting-code-reviews","title":"Part 2: Conducting Code Reviews","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#for-reviewers-how-to-review-pull-requests","title":"For Reviewers: How to Review Pull Requests","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-1-access-the-pull-request","title":"Step 1: Access the Pull Request","text":"<p>GitHub Web: 1. Navigate to the repository 2. Go to Pull requests tab 3. Click on the PR you need to review 4. You\u2019ll receive email notifications for review requests</p> <p>GitHub CLI: <pre><code># List PRs requesting your review\ngh pr list --reviewer @me\n\n# View specific PR\ngh pr view [PR-number]\n\n# Checkout PR locally for testing\ngh pr checkout [PR-number]\n</code></pre></p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-2-review-the-changes","title":"Step 2: Review the Changes","text":"<p>In GitHub Web Interface:</p> <ol> <li>Overview Tab: Read the PR description and context</li> <li>Commits Tab: Review the commit history</li> <li>Files Changed Tab: This is where you\u2019ll do most of your review</li> </ol> <p>Reviewing Files: 1. Click on the \u201cFiles changed\u201d tab 2. Review each modified file 3. Look for:    - Code quality and style    - Logic errors    - Security issues    - Performance concerns    - Test coverage    - Documentation updates</p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#step-3-adding-review-comments","title":"Step 3: Adding Review Comments","text":"<p>Inline Comments: 1. Hover over any line of code 2. Click the \u201d+\u201d button that appears 3. Add your comment 4. Choose comment type:    - Single comment: Just a comment    - Start a review: Begin a comprehensive review</p> <p>General Comments: 1. Use the review summary box at the top or bottom 2. Provide overall feedback about the PR</p> <p>Suggesting Changes: 1. Click the suggestion button (\u00b1) when commenting 2. GitHub will create a code suggestion that can be applied directly</p> <p><pre><code>```suggestion\n// Suggested code change\nconst result = await fetchData();\n</code></pre> <pre><code>#### Step 4: Submit Your Review\n\n1. Click **\"Review changes\"** button\n2. Add a summary comment\n3. Choose your review decision:\n   - **Comment**: General feedback without approval/rejection\n   - **Approve**: Code looks good and is ready to merge\n   - **Request changes**: Issues must be addressed before merging\n4. Click **\"Submit review\"**\n\n### Using GitHub CLI for Reviews\n\n```sh\n# Add a review comment\ngh pr comment [PR-number] --body \"Great work on this feature!\"\n\n# Review and approve\ngh pr review [PR-number] --approve --body \"LGTM! Great implementation.\"\n\n# Request changes\ngh pr review [PR-number] --request-changes --body \"Please address the security concerns mentioned in the comments.\"\n\n# Add comment without approval/rejection\ngh pr review [PR-number] --comment --body \"Thanks for the PR. I've added some suggestions.\"\n</code></pre></p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#using-github-mcp-for-reviews","title":"Using GitHub MCP for Reviews","text":"<pre><code>Review pull request #123 and approve it with comment \"Great implementation of the authentication feature\"\n</code></pre> <pre><code>Add review comment to PR #456: \"Please add unit tests for the new validation logic\"\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-3-managing-review-process","title":"Part 3: Managing Review Process","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#for-pr-authors-responding-to-reviews","title":"For PR Authors: Responding to Reviews","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#addressing-review-comments","title":"Addressing Review Comments","text":"<ol> <li>Read all feedback carefully</li> <li>Respond to questions and concerns</li> <li>Make requested code changes</li> <li>Push updates to the same branch</li> </ol> <pre><code># Make changes based on feedback\n# Stage and commit changes\ngit add .\ngit commit -m \"Address review feedback: Add input validation\"\n\n# Push updates (automatically updates the PR)\ngit push origin feature-branch\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#resolving-conversations","title":"Resolving Conversations","text":"<ol> <li>After addressing a comment, click \u201cResolve conversation\u201d</li> <li>This helps track which issues have been handled</li> <li>Only the comment author or PR author can resolve conversations</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#requesting-re-review","title":"Requesting Re-review","text":"<p>GitHub Web: 1. After making changes, click the re-review icon (\ud83d\udd04) next to reviewer names 2. This notifies reviewers that you\u2019ve addressed their feedback</p> <p>GitHub CLI: <pre><code># Request re-review from specific reviewers\ngh pr edit [PR-number] --add-reviewer username\n</code></pre></p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#review-status-and-checks","title":"Review Status and Checks","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#understanding-review-states","title":"Understanding Review States","text":"<ul> <li>Review requested: Waiting for reviewer action</li> <li>Approved: Reviewer has approved the changes</li> <li>Changes requested: Issues must be addressed</li> <li>Commented: Feedback provided without approval/rejection</li> </ul>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#branch-protection-and-required-reviews","title":"Branch Protection and Required Reviews","text":"<p>Setting up branch protection: 1. Go to repository Settings &gt; Branches 2. Add rule for protected branch (e.g., <code>main</code>) 3. Enable \u201cRequire pull request reviews before merging\u201d 4. Configure:    - Number of required approving reviews    - Dismiss stale reviews when new commits are pushed    - Require review from code owners    - Restrict push access</p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#status-checks","title":"Status Checks","text":"<p>Monitor various checks: - Required reviews: Green \u2705 when sufficient approvals received - CI/CD pipelines: Automated tests and builds - Code quality checks: Linting, security scans - Merge conflicts: Ensure branch can be merged cleanly</p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-4-best-practices-for-code-reviews","title":"Part 4: Best Practices for Code Reviews","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#for-review-requesters","title":"For Review Requesters","text":"<ol> <li>Self-review first: Review your own code before requesting reviews</li> <li>Provide context: Write clear PR descriptions explaining the changes</li> <li>Keep PRs focused: Smaller, focused PRs are easier to review</li> <li>Respond promptly: Address feedback quickly and respectfully</li> <li>Test thoroughly: Ensure your code works before requesting review</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#for-reviewers","title":"For Reviewers","text":"<ol> <li>Review promptly: Aim to review within 24-48 hours</li> <li>Be constructive: Provide specific, actionable feedback</li> <li>Explain reasoning: Help the author understand why changes are needed</li> <li>Praise good work: Acknowledge well-written code and good practices</li> <li>Focus on important issues: Distinguish between critical and nitpicky comments</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#review-comments-best-practices","title":"Review Comments Best Practices","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#good-review-comments","title":"Good Review Comments","text":"<pre><code># Constructive and specific\nConsider extracting this logic into a separate function for better testability and reusability.\n\n# Provides alternatives\nThis could be vulnerable to SQL injection. Consider using parameterized queries or an ORM.\n\n# Acknowledges good work\nNice use of the async/await pattern here. This makes the code much more readable.\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#comments-to-avoid","title":"Comments to Avoid","text":"<pre><code># Too vague\nThis is wrong.\n\n# Not constructive\nWhy did you do it this way?\n\n# Overly nitpicky\nYou should use single quotes instead of double quotes.\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-5-advanced-review-features","title":"Part 5: Advanced Review Features","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#code-owners","title":"Code Owners","text":"<p>Create a <code>.github/CODEOWNERS</code> file to automatically request reviews:</p> <pre><code># Global owners\n* @username1 @username2\n\n# Frontend code\n/frontend/ @frontend-team\n\n# Backend API\n/api/ @backend-team\n\n# Documentation\n*.md @docs-team\n\n# Configuration files\n*.yml @devops-team\n*.yaml @devops-team\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#review-templates","title":"Review Templates","text":"<p>Create <code>.github/pull_request_template.md</code>:</p> <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\n## How Has This Been Tested?\n- [ ] Unit tests\n- [ ] Integration tests\n- [ ] Manual testing\n\n## Checklist:\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#automated-review-tools","title":"Automated Review Tools","text":"<p>Consider integrating: - CodeClimate: Code quality analysis - SonarQube: Security and quality scanning - Dependabot: Dependency updates - GitHub CodeQL: Security vulnerability scanning</p>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#part-6-troubleshooting-common-issues","title":"Part 6: Troubleshooting Common Issues","text":""},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#review-not-showing-up","title":"Review Not Showing Up","text":"<ol> <li>Check permissions: Ensure reviewer has access to the repository</li> <li>Verify notifications: Check email and GitHub notification settings</li> <li>Re-request review: Try removing and re-adding the reviewer</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#cannot-approve-pr","title":"Cannot Approve PR","text":"<ol> <li>Author cannot approve: PR authors cannot approve their own PRs</li> <li>Insufficient permissions: Check if you have review permissions</li> <li>Branch protection: Required checks or reviews might be missing</li> </ol>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#merge-conflicts","title":"Merge Conflicts","text":"<pre><code># Update your branch with latest main\ngit checkout main\ngit pull origin main\ngit checkout feature-branch\ngit merge main\n\n# Resolve conflicts in your editor\n# Add resolved files\ngit add .\ngit commit -m \"Resolve merge conflicts\"\ngit push origin feature-branch\n</code></pre>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Review Documentation</li> <li>Code Review Best Practices</li> <li>Setting Up Branch Protection</li> </ul>"},{"location":"002-Working-With-PR/03-Working-With-PR-Reviews/#end-of-guide","title":"End of Guide","text":""}]}